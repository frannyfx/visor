// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_CaptureConfig;
class Config_CaptureConfigDefaultTypeInternal;
extern Config_CaptureConfigDefaultTypeInternal _Config_CaptureConfig_default_instance_;
class Config_OverlayConfig;
class Config_OverlayConfigDefaultTypeInternal;
extern Config_OverlayConfigDefaultTypeInternal _Config_OverlayConfig_default_instance_;
class Config_ResourceConfig;
class Config_ResourceConfigDefaultTypeInternal;
extern Config_ResourceConfigDefaultTypeInternal _Config_ResourceConfig_default_instance_;
class Config_ResourceConfig_Resource;
class Config_ResourceConfig_ResourceDefaultTypeInternal;
extern Config_ResourceConfig_ResourceDefaultTypeInternal _Config_ResourceConfig_Resource_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Config* Arena::CreateMaybeMessage<::Config>(Arena*);
template<> ::Config_CaptureConfig* Arena::CreateMaybeMessage<::Config_CaptureConfig>(Arena*);
template<> ::Config_OverlayConfig* Arena::CreateMaybeMessage<::Config_OverlayConfig>(Arena*);
template<> ::Config_ResourceConfig* Arena::CreateMaybeMessage<::Config_ResourceConfig>(Arena*);
template<> ::Config_ResourceConfig_Resource* Arena::CreateMaybeMessage<::Config_ResourceConfig_Resource>(Arena*);
template<> ::ServerMessage* Arena::CreateMaybeMessage<::ServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Config_CaptureConfig_CaptureMode : int {
  Config_CaptureConfig_CaptureMode_DVR = 0,
  Config_CaptureConfig_CaptureMode_INSTANT_REPLAY = 1,
  Config_CaptureConfig_CaptureMode_Config_CaptureConfig_CaptureMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Config_CaptureConfig_CaptureMode_Config_CaptureConfig_CaptureMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Config_CaptureConfig_CaptureMode_IsValid(int value);
constexpr Config_CaptureConfig_CaptureMode Config_CaptureConfig_CaptureMode_CaptureMode_MIN = Config_CaptureConfig_CaptureMode_DVR;
constexpr Config_CaptureConfig_CaptureMode Config_CaptureConfig_CaptureMode_CaptureMode_MAX = Config_CaptureConfig_CaptureMode_INSTANT_REPLAY;
constexpr int Config_CaptureConfig_CaptureMode_CaptureMode_ARRAYSIZE = Config_CaptureConfig_CaptureMode_CaptureMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_CaptureConfig_CaptureMode_descriptor();
template<typename T>
inline const std::string& Config_CaptureConfig_CaptureMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Config_CaptureConfig_CaptureMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Config_CaptureConfig_CaptureMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Config_CaptureConfig_CaptureMode_descriptor(), enum_t_value);
}
inline bool Config_CaptureConfig_CaptureMode_Parse(
    const std::string& name, Config_CaptureConfig_CaptureMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Config_CaptureConfig_CaptureMode>(
    Config_CaptureConfig_CaptureMode_descriptor(), name, value);
}
enum ServerMessage_Type : int {
  ServerMessage_Type_CONFIG = 0,
  ServerMessage_Type_ENCODER_READY = 1,
  ServerMessage_Type_ENCODER_ERROR = 2,
  ServerMessage_Type_ServerMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerMessage_Type_ServerMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerMessage_Type_IsValid(int value);
constexpr ServerMessage_Type ServerMessage_Type_Type_MIN = ServerMessage_Type_CONFIG;
constexpr ServerMessage_Type ServerMessage_Type_Type_MAX = ServerMessage_Type_ENCODER_ERROR;
constexpr int ServerMessage_Type_Type_ARRAYSIZE = ServerMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_Type_descriptor();
template<typename T>
inline const std::string& ServerMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMessage_Type_descriptor(), enum_t_value);
}
inline bool ServerMessage_Type_Parse(
    const std::string& name, ServerMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessage_Type>(
    ServerMessage_Type_descriptor(), name, value);
}
enum Position : int {
  TOP_LEFT = 0,
  TOP_RIGHT = 1,
  BOTTOM_LEFT = 2,
  BOTTOM_RIGHT = 3,
  Position_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Position_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Position_IsValid(int value);
constexpr Position Position_MIN = TOP_LEFT;
constexpr Position Position_MAX = BOTTOM_RIGHT;
constexpr int Position_ARRAYSIZE = Position_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_descriptor();
template<typename T>
inline const std::string& Position_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Position>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Position_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Position_descriptor(), enum_t_value);
}
inline bool Position_Parse(
    const std::string& name, Position* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Position>(
    Position_descriptor(), name, value);
}
// ===================================================================

class Config_ResourceConfig_Resource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.ResourceConfig.Resource) */ {
 public:
  Config_ResourceConfig_Resource();
  virtual ~Config_ResourceConfig_Resource();

  Config_ResourceConfig_Resource(const Config_ResourceConfig_Resource& from);
  Config_ResourceConfig_Resource(Config_ResourceConfig_Resource&& from) noexcept
    : Config_ResourceConfig_Resource() {
    *this = ::std::move(from);
  }

  inline Config_ResourceConfig_Resource& operator=(const Config_ResourceConfig_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config_ResourceConfig_Resource& operator=(Config_ResourceConfig_Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config_ResourceConfig_Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_ResourceConfig_Resource* internal_default_instance() {
    return reinterpret_cast<const Config_ResourceConfig_Resource*>(
               &_Config_ResourceConfig_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config_ResourceConfig_Resource& a, Config_ResourceConfig_Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Config_ResourceConfig_Resource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config_ResourceConfig_Resource* New() const final {
    return CreateMaybeMessage<Config_ResourceConfig_Resource>(nullptr);
  }

  Config_ResourceConfig_Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config_ResourceConfig_Resource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config_ResourceConfig_Resource& from);
  void MergeFrom(const Config_ResourceConfig_Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_ResourceConfig_Resource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.ResourceConfig.Resource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kResourceIdFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 resource_id = 1;
  void clear_resource_id();
  ::PROTOBUF_NAMESPACE_ID::int32 resource_id() const;
  void set_resource_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resource_id() const;
  void _internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.ResourceConfig.Resource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 resource_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class Config_ResourceConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.ResourceConfig) */ {
 public:
  Config_ResourceConfig();
  virtual ~Config_ResourceConfig();

  Config_ResourceConfig(const Config_ResourceConfig& from);
  Config_ResourceConfig(Config_ResourceConfig&& from) noexcept
    : Config_ResourceConfig() {
    *this = ::std::move(from);
  }

  inline Config_ResourceConfig& operator=(const Config_ResourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config_ResourceConfig& operator=(Config_ResourceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config_ResourceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_ResourceConfig* internal_default_instance() {
    return reinterpret_cast<const Config_ResourceConfig*>(
               &_Config_ResourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Config_ResourceConfig& a, Config_ResourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Config_ResourceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config_ResourceConfig* New() const final {
    return CreateMaybeMessage<Config_ResourceConfig>(nullptr);
  }

  Config_ResourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config_ResourceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config_ResourceConfig& from);
  void MergeFrom(const Config_ResourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_ResourceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.ResourceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Config_ResourceConfig_Resource Resource;

  // accessors -------------------------------------------------------

  enum : int {
    kResourcePathFieldNumber = 1,
  };
  // string resource_path = 1;
  void clear_resource_path();
  const std::string& resource_path() const;
  void set_resource_path(const std::string& value);
  void set_resource_path(std::string&& value);
  void set_resource_path(const char* value);
  void set_resource_path(const char* value, size_t size);
  std::string* mutable_resource_path();
  std::string* release_resource_path();
  void set_allocated_resource_path(std::string* resource_path);
  private:
  const std::string& _internal_resource_path() const;
  void _internal_set_resource_path(const std::string& value);
  std::string* _internal_mutable_resource_path();
  public:

  // @@protoc_insertion_point(class_scope:Config.ResourceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class Config_OverlayConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.OverlayConfig) */ {
 public:
  Config_OverlayConfig();
  virtual ~Config_OverlayConfig();

  Config_OverlayConfig(const Config_OverlayConfig& from);
  Config_OverlayConfig(Config_OverlayConfig&& from) noexcept
    : Config_OverlayConfig() {
    *this = ::std::move(from);
  }

  inline Config_OverlayConfig& operator=(const Config_OverlayConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config_OverlayConfig& operator=(Config_OverlayConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config_OverlayConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_OverlayConfig* internal_default_instance() {
    return reinterpret_cast<const Config_OverlayConfig*>(
               &_Config_OverlayConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config_OverlayConfig& a, Config_OverlayConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Config_OverlayConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config_OverlayConfig* New() const final {
    return CreateMaybeMessage<Config_OverlayConfig>(nullptr);
  }

  Config_OverlayConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config_OverlayConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config_OverlayConfig& from);
  void MergeFrom(const Config_OverlayConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_OverlayConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.OverlayConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kShowNotificationsFieldNumber = 2,
    kShowCaptureIndicatorFieldNumber = 3,
    kNotificationsPositionFieldNumber = 4,
    kCaptureIndicatorPositionFieldNumber = 5,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool show_notifications = 2;
  void clear_show_notifications();
  bool show_notifications() const;
  void set_show_notifications(bool value);
  private:
  bool _internal_show_notifications() const;
  void _internal_set_show_notifications(bool value);
  public:

  // bool show_capture_indicator = 3;
  void clear_show_capture_indicator();
  bool show_capture_indicator() const;
  void set_show_capture_indicator(bool value);
  private:
  bool _internal_show_capture_indicator() const;
  void _internal_set_show_capture_indicator(bool value);
  public:

  // .Position notifications_position = 4;
  void clear_notifications_position();
  ::Position notifications_position() const;
  void set_notifications_position(::Position value);
  private:
  ::Position _internal_notifications_position() const;
  void _internal_set_notifications_position(::Position value);
  public:

  // .Position capture_indicator_position = 5;
  void clear_capture_indicator_position();
  ::Position capture_indicator_position() const;
  void set_capture_indicator_position(::Position value);
  private:
  ::Position _internal_capture_indicator_position() const;
  void _internal_set_capture_indicator_position(::Position value);
  public:

  // @@protoc_insertion_point(class_scope:Config.OverlayConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  bool show_notifications_;
  bool show_capture_indicator_;
  int notifications_position_;
  int capture_indicator_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class Config_CaptureConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.CaptureConfig) */ {
 public:
  Config_CaptureConfig();
  virtual ~Config_CaptureConfig();

  Config_CaptureConfig(const Config_CaptureConfig& from);
  Config_CaptureConfig(Config_CaptureConfig&& from) noexcept
    : Config_CaptureConfig() {
    *this = ::std::move(from);
  }

  inline Config_CaptureConfig& operator=(const Config_CaptureConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config_CaptureConfig& operator=(Config_CaptureConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config_CaptureConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_CaptureConfig* internal_default_instance() {
    return reinterpret_cast<const Config_CaptureConfig*>(
               &_Config_CaptureConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Config_CaptureConfig& a, Config_CaptureConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Config_CaptureConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config_CaptureConfig* New() const final {
    return CreateMaybeMessage<Config_CaptureConfig>(nullptr);
  }

  Config_CaptureConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config_CaptureConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config_CaptureConfig& from);
  void MergeFrom(const Config_CaptureConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_CaptureConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.CaptureConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Config_CaptureConfig_CaptureMode CaptureMode;
  static constexpr CaptureMode DVR =
    Config_CaptureConfig_CaptureMode_DVR;
  static constexpr CaptureMode INSTANT_REPLAY =
    Config_CaptureConfig_CaptureMode_INSTANT_REPLAY;
  static inline bool CaptureMode_IsValid(int value) {
    return Config_CaptureConfig_CaptureMode_IsValid(value);
  }
  static constexpr CaptureMode CaptureMode_MIN =
    Config_CaptureConfig_CaptureMode_CaptureMode_MIN;
  static constexpr CaptureMode CaptureMode_MAX =
    Config_CaptureConfig_CaptureMode_CaptureMode_MAX;
  static constexpr int CaptureMode_ARRAYSIZE =
    Config_CaptureConfig_CaptureMode_CaptureMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CaptureMode_descriptor() {
    return Config_CaptureConfig_CaptureMode_descriptor();
  }
  template<typename T>
  static inline const std::string& CaptureMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CaptureMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CaptureMode_Name.");
    return Config_CaptureConfig_CaptureMode_Name(enum_t_value);
  }
  static inline bool CaptureMode_Parse(const std::string& name,
      CaptureMode* value) {
    return Config_CaptureConfig_CaptureMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kCaptureModeFieldNumber = 2,
    kFramerateFieldNumber = 3,
    kInstantReplayDurationFieldNumber = 4,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .Config.CaptureConfig.CaptureMode capture_mode = 2;
  void clear_capture_mode();
  ::Config_CaptureConfig_CaptureMode capture_mode() const;
  void set_capture_mode(::Config_CaptureConfig_CaptureMode value);
  private:
  ::Config_CaptureConfig_CaptureMode _internal_capture_mode() const;
  void _internal_set_capture_mode(::Config_CaptureConfig_CaptureMode value);
  public:

  // int32 framerate = 3;
  void clear_framerate();
  ::PROTOBUF_NAMESPACE_ID::int32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_framerate() const;
  void _internal_set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 instant_replay_duration = 4;
  void clear_instant_replay_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 instant_replay_duration() const;
  void set_instant_replay_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instant_replay_duration() const;
  void _internal_set_instant_replay_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.CaptureConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  int capture_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate_;
  ::PROTOBUF_NAMESPACE_ID::int32 instant_replay_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Config_ResourceConfig ResourceConfig;
  typedef Config_OverlayConfig OverlayConfig;
  typedef Config_CaptureConfig CaptureConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
    kOverlayFieldNumber = 2,
    kCaptureFieldNumber = 3,
  };
  // .Config.ResourceConfig resources = 1;
  bool has_resources() const;
  private:
  bool _internal_has_resources() const;
  public:
  void clear_resources();
  const ::Config_ResourceConfig& resources() const;
  ::Config_ResourceConfig* release_resources();
  ::Config_ResourceConfig* mutable_resources();
  void set_allocated_resources(::Config_ResourceConfig* resources);
  private:
  const ::Config_ResourceConfig& _internal_resources() const;
  ::Config_ResourceConfig* _internal_mutable_resources();
  public:

  // .Config.OverlayConfig overlay = 2;
  bool has_overlay() const;
  private:
  bool _internal_has_overlay() const;
  public:
  void clear_overlay();
  const ::Config_OverlayConfig& overlay() const;
  ::Config_OverlayConfig* release_overlay();
  ::Config_OverlayConfig* mutable_overlay();
  void set_allocated_overlay(::Config_OverlayConfig* overlay);
  private:
  const ::Config_OverlayConfig& _internal_overlay() const;
  ::Config_OverlayConfig* _internal_mutable_overlay();
  public:

  // .Config.CaptureConfig capture = 3;
  bool has_capture() const;
  private:
  bool _internal_has_capture() const;
  public:
  void clear_capture();
  const ::Config_CaptureConfig& capture() const;
  ::Config_CaptureConfig* release_capture();
  ::Config_CaptureConfig* mutable_capture();
  void set_allocated_capture(::Config_CaptureConfig* capture);
  private:
  const ::Config_CaptureConfig& _internal_capture() const;
  ::Config_CaptureConfig* _internal_mutable_capture();
  public:

  // @@protoc_insertion_point(class_scope:Config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Config_ResourceConfig* resources_;
  ::Config_OverlayConfig* overlay_;
  ::Config_CaptureConfig* capture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerMessage_Type Type;
  static constexpr Type CONFIG =
    ServerMessage_Type_CONFIG;
  static constexpr Type ENCODER_READY =
    ServerMessage_Type_ENCODER_READY;
  static constexpr Type ENCODER_ERROR =
    ServerMessage_Type_ENCODER_ERROR;
  static inline bool Type_IsValid(int value) {
    return ServerMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ServerMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ServerMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ServerMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ServerMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ServerMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return ServerMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kConfigFieldNumber = 3,
    kMessageTypeFieldNumber = 2,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .Config config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::Config& config() const;
  ::Config* release_config();
  ::Config* mutable_config();
  void set_allocated_config(::Config* config);
  private:
  const ::Config& _internal_config() const;
  ::Config* _internal_mutable_config();
  public:

  // .ServerMessage.Type message_type = 2;
  void clear_message_type();
  ::ServerMessage_Type message_type() const;
  void set_message_type(::ServerMessage_Type value);
  private:
  ::ServerMessage_Type _internal_message_type() const;
  void _internal_set_message_type(::ServerMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:ServerMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::Config* config_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config_ResourceConfig_Resource

// int32 resource_id = 1;
inline void Config_ResourceConfig_Resource::clear_resource_id() {
  resource_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config_ResourceConfig_Resource::_internal_resource_id() const {
  return resource_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config_ResourceConfig_Resource::resource_id() const {
  // @@protoc_insertion_point(field_get:Config.ResourceConfig.Resource.resource_id)
  return _internal_resource_id();
}
inline void Config_ResourceConfig_Resource::_internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resource_id_ = value;
}
inline void Config_ResourceConfig_Resource::set_resource_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:Config.ResourceConfig.Resource.resource_id)
}

// string path = 2;
inline void Config_ResourceConfig_Resource::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config_ResourceConfig_Resource::path() const {
  // @@protoc_insertion_point(field_get:Config.ResourceConfig.Resource.path)
  return _internal_path();
}
inline void Config_ResourceConfig_Resource::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Config.ResourceConfig.Resource.path)
}
inline std::string* Config_ResourceConfig_Resource::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Config.ResourceConfig.Resource.path)
  return _internal_mutable_path();
}
inline const std::string& Config_ResourceConfig_Resource::_internal_path() const {
  return path_.GetNoArena();
}
inline void Config_ResourceConfig_Resource::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config_ResourceConfig_Resource::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.ResourceConfig.Resource.path)
}
inline void Config_ResourceConfig_Resource::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.ResourceConfig.Resource.path)
}
inline void Config_ResourceConfig_Resource::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.ResourceConfig.Resource.path)
}
inline std::string* Config_ResourceConfig_Resource::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config_ResourceConfig_Resource::release_path() {
  // @@protoc_insertion_point(field_release:Config.ResourceConfig.Resource.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config_ResourceConfig_Resource::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Config.ResourceConfig.Resource.path)
}

// -------------------------------------------------------------------

// Config_ResourceConfig

// string resource_path = 1;
inline void Config_ResourceConfig::clear_resource_path() {
  resource_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config_ResourceConfig::resource_path() const {
  // @@protoc_insertion_point(field_get:Config.ResourceConfig.resource_path)
  return _internal_resource_path();
}
inline void Config_ResourceConfig::set_resource_path(const std::string& value) {
  _internal_set_resource_path(value);
  // @@protoc_insertion_point(field_set:Config.ResourceConfig.resource_path)
}
inline std::string* Config_ResourceConfig::mutable_resource_path() {
  // @@protoc_insertion_point(field_mutable:Config.ResourceConfig.resource_path)
  return _internal_mutable_resource_path();
}
inline const std::string& Config_ResourceConfig::_internal_resource_path() const {
  return resource_path_.GetNoArena();
}
inline void Config_ResourceConfig::_internal_set_resource_path(const std::string& value) {
  
  resource_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config_ResourceConfig::set_resource_path(std::string&& value) {
  
  resource_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.ResourceConfig.resource_path)
}
inline void Config_ResourceConfig::set_resource_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.ResourceConfig.resource_path)
}
inline void Config_ResourceConfig::set_resource_path(const char* value, size_t size) {
  
  resource_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.ResourceConfig.resource_path)
}
inline std::string* Config_ResourceConfig::_internal_mutable_resource_path() {
  
  return resource_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config_ResourceConfig::release_resource_path() {
  // @@protoc_insertion_point(field_release:Config.ResourceConfig.resource_path)
  
  return resource_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config_ResourceConfig::set_allocated_resource_path(std::string* resource_path) {
  if (resource_path != nullptr) {
    
  } else {
    
  }
  resource_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_path);
  // @@protoc_insertion_point(field_set_allocated:Config.ResourceConfig.resource_path)
}

// -------------------------------------------------------------------

// Config_OverlayConfig

// bool enabled = 1;
inline void Config_OverlayConfig::clear_enabled() {
  enabled_ = false;
}
inline bool Config_OverlayConfig::_internal_enabled() const {
  return enabled_;
}
inline bool Config_OverlayConfig::enabled() const {
  // @@protoc_insertion_point(field_get:Config.OverlayConfig.enabled)
  return _internal_enabled();
}
inline void Config_OverlayConfig::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Config_OverlayConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Config.OverlayConfig.enabled)
}

// bool show_notifications = 2;
inline void Config_OverlayConfig::clear_show_notifications() {
  show_notifications_ = false;
}
inline bool Config_OverlayConfig::_internal_show_notifications() const {
  return show_notifications_;
}
inline bool Config_OverlayConfig::show_notifications() const {
  // @@protoc_insertion_point(field_get:Config.OverlayConfig.show_notifications)
  return _internal_show_notifications();
}
inline void Config_OverlayConfig::_internal_set_show_notifications(bool value) {
  
  show_notifications_ = value;
}
inline void Config_OverlayConfig::set_show_notifications(bool value) {
  _internal_set_show_notifications(value);
  // @@protoc_insertion_point(field_set:Config.OverlayConfig.show_notifications)
}

// bool show_capture_indicator = 3;
inline void Config_OverlayConfig::clear_show_capture_indicator() {
  show_capture_indicator_ = false;
}
inline bool Config_OverlayConfig::_internal_show_capture_indicator() const {
  return show_capture_indicator_;
}
inline bool Config_OverlayConfig::show_capture_indicator() const {
  // @@protoc_insertion_point(field_get:Config.OverlayConfig.show_capture_indicator)
  return _internal_show_capture_indicator();
}
inline void Config_OverlayConfig::_internal_set_show_capture_indicator(bool value) {
  
  show_capture_indicator_ = value;
}
inline void Config_OverlayConfig::set_show_capture_indicator(bool value) {
  _internal_set_show_capture_indicator(value);
  // @@protoc_insertion_point(field_set:Config.OverlayConfig.show_capture_indicator)
}

// .Position notifications_position = 4;
inline void Config_OverlayConfig::clear_notifications_position() {
  notifications_position_ = 0;
}
inline ::Position Config_OverlayConfig::_internal_notifications_position() const {
  return static_cast< ::Position >(notifications_position_);
}
inline ::Position Config_OverlayConfig::notifications_position() const {
  // @@protoc_insertion_point(field_get:Config.OverlayConfig.notifications_position)
  return _internal_notifications_position();
}
inline void Config_OverlayConfig::_internal_set_notifications_position(::Position value) {
  
  notifications_position_ = value;
}
inline void Config_OverlayConfig::set_notifications_position(::Position value) {
  _internal_set_notifications_position(value);
  // @@protoc_insertion_point(field_set:Config.OverlayConfig.notifications_position)
}

// .Position capture_indicator_position = 5;
inline void Config_OverlayConfig::clear_capture_indicator_position() {
  capture_indicator_position_ = 0;
}
inline ::Position Config_OverlayConfig::_internal_capture_indicator_position() const {
  return static_cast< ::Position >(capture_indicator_position_);
}
inline ::Position Config_OverlayConfig::capture_indicator_position() const {
  // @@protoc_insertion_point(field_get:Config.OverlayConfig.capture_indicator_position)
  return _internal_capture_indicator_position();
}
inline void Config_OverlayConfig::_internal_set_capture_indicator_position(::Position value) {
  
  capture_indicator_position_ = value;
}
inline void Config_OverlayConfig::set_capture_indicator_position(::Position value) {
  _internal_set_capture_indicator_position(value);
  // @@protoc_insertion_point(field_set:Config.OverlayConfig.capture_indicator_position)
}

// -------------------------------------------------------------------

// Config_CaptureConfig

// bool enabled = 1;
inline void Config_CaptureConfig::clear_enabled() {
  enabled_ = false;
}
inline bool Config_CaptureConfig::_internal_enabled() const {
  return enabled_;
}
inline bool Config_CaptureConfig::enabled() const {
  // @@protoc_insertion_point(field_get:Config.CaptureConfig.enabled)
  return _internal_enabled();
}
inline void Config_CaptureConfig::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Config_CaptureConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Config.CaptureConfig.enabled)
}

// .Config.CaptureConfig.CaptureMode capture_mode = 2;
inline void Config_CaptureConfig::clear_capture_mode() {
  capture_mode_ = 0;
}
inline ::Config_CaptureConfig_CaptureMode Config_CaptureConfig::_internal_capture_mode() const {
  return static_cast< ::Config_CaptureConfig_CaptureMode >(capture_mode_);
}
inline ::Config_CaptureConfig_CaptureMode Config_CaptureConfig::capture_mode() const {
  // @@protoc_insertion_point(field_get:Config.CaptureConfig.capture_mode)
  return _internal_capture_mode();
}
inline void Config_CaptureConfig::_internal_set_capture_mode(::Config_CaptureConfig_CaptureMode value) {
  
  capture_mode_ = value;
}
inline void Config_CaptureConfig::set_capture_mode(::Config_CaptureConfig_CaptureMode value) {
  _internal_set_capture_mode(value);
  // @@protoc_insertion_point(field_set:Config.CaptureConfig.capture_mode)
}

// int32 framerate = 3;
inline void Config_CaptureConfig::clear_framerate() {
  framerate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config_CaptureConfig::_internal_framerate() const {
  return framerate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config_CaptureConfig::framerate() const {
  // @@protoc_insertion_point(field_get:Config.CaptureConfig.framerate)
  return _internal_framerate();
}
inline void Config_CaptureConfig::_internal_set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  framerate_ = value;
}
inline void Config_CaptureConfig::set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:Config.CaptureConfig.framerate)
}

// int32 instant_replay_duration = 4;
inline void Config_CaptureConfig::clear_instant_replay_duration() {
  instant_replay_duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config_CaptureConfig::_internal_instant_replay_duration() const {
  return instant_replay_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config_CaptureConfig::instant_replay_duration() const {
  // @@protoc_insertion_point(field_get:Config.CaptureConfig.instant_replay_duration)
  return _internal_instant_replay_duration();
}
inline void Config_CaptureConfig::_internal_set_instant_replay_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instant_replay_duration_ = value;
}
inline void Config_CaptureConfig::set_instant_replay_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instant_replay_duration(value);
  // @@protoc_insertion_point(field_set:Config.CaptureConfig.instant_replay_duration)
}

// -------------------------------------------------------------------

// Config

// .Config.ResourceConfig resources = 1;
inline bool Config::_internal_has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline bool Config::has_resources() const {
  return _internal_has_resources();
}
inline void Config::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
inline const ::Config_ResourceConfig& Config::_internal_resources() const {
  const ::Config_ResourceConfig* p = resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Config_ResourceConfig*>(
      &::_Config_ResourceConfig_default_instance_);
}
inline const ::Config_ResourceConfig& Config::resources() const {
  // @@protoc_insertion_point(field_get:Config.resources)
  return _internal_resources();
}
inline ::Config_ResourceConfig* Config::release_resources() {
  // @@protoc_insertion_point(field_release:Config.resources)
  
  ::Config_ResourceConfig* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::Config_ResourceConfig* Config::_internal_mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config_ResourceConfig>(GetArenaNoVirtual());
    resources_ = p;
  }
  return resources_;
}
inline ::Config_ResourceConfig* Config::mutable_resources() {
  // @@protoc_insertion_point(field_mutable:Config.resources)
  return _internal_mutable_resources();
}
inline void Config::set_allocated_resources(::Config_ResourceConfig* resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resources_;
  }
  if (resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:Config.resources)
}

// .Config.OverlayConfig overlay = 2;
inline bool Config::_internal_has_overlay() const {
  return this != internal_default_instance() && overlay_ != nullptr;
}
inline bool Config::has_overlay() const {
  return _internal_has_overlay();
}
inline void Config::clear_overlay() {
  if (GetArenaNoVirtual() == nullptr && overlay_ != nullptr) {
    delete overlay_;
  }
  overlay_ = nullptr;
}
inline const ::Config_OverlayConfig& Config::_internal_overlay() const {
  const ::Config_OverlayConfig* p = overlay_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Config_OverlayConfig*>(
      &::_Config_OverlayConfig_default_instance_);
}
inline const ::Config_OverlayConfig& Config::overlay() const {
  // @@protoc_insertion_point(field_get:Config.overlay)
  return _internal_overlay();
}
inline ::Config_OverlayConfig* Config::release_overlay() {
  // @@protoc_insertion_point(field_release:Config.overlay)
  
  ::Config_OverlayConfig* temp = overlay_;
  overlay_ = nullptr;
  return temp;
}
inline ::Config_OverlayConfig* Config::_internal_mutable_overlay() {
  
  if (overlay_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config_OverlayConfig>(GetArenaNoVirtual());
    overlay_ = p;
  }
  return overlay_;
}
inline ::Config_OverlayConfig* Config::mutable_overlay() {
  // @@protoc_insertion_point(field_mutable:Config.overlay)
  return _internal_mutable_overlay();
}
inline void Config::set_allocated_overlay(::Config_OverlayConfig* overlay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete overlay_;
  }
  if (overlay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overlay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay, submessage_arena);
    }
    
  } else {
    
  }
  overlay_ = overlay;
  // @@protoc_insertion_point(field_set_allocated:Config.overlay)
}

// .Config.CaptureConfig capture = 3;
inline bool Config::_internal_has_capture() const {
  return this != internal_default_instance() && capture_ != nullptr;
}
inline bool Config::has_capture() const {
  return _internal_has_capture();
}
inline void Config::clear_capture() {
  if (GetArenaNoVirtual() == nullptr && capture_ != nullptr) {
    delete capture_;
  }
  capture_ = nullptr;
}
inline const ::Config_CaptureConfig& Config::_internal_capture() const {
  const ::Config_CaptureConfig* p = capture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Config_CaptureConfig*>(
      &::_Config_CaptureConfig_default_instance_);
}
inline const ::Config_CaptureConfig& Config::capture() const {
  // @@protoc_insertion_point(field_get:Config.capture)
  return _internal_capture();
}
inline ::Config_CaptureConfig* Config::release_capture() {
  // @@protoc_insertion_point(field_release:Config.capture)
  
  ::Config_CaptureConfig* temp = capture_;
  capture_ = nullptr;
  return temp;
}
inline ::Config_CaptureConfig* Config::_internal_mutable_capture() {
  
  if (capture_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config_CaptureConfig>(GetArenaNoVirtual());
    capture_ = p;
  }
  return capture_;
}
inline ::Config_CaptureConfig* Config::mutable_capture() {
  // @@protoc_insertion_point(field_mutable:Config.capture)
  return _internal_mutable_capture();
}
inline void Config::set_allocated_capture(::Config_CaptureConfig* capture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capture_;
  }
  if (capture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture, submessage_arena);
    }
    
  } else {
    
  }
  capture_ = capture;
  // @@protoc_insertion_point(field_set_allocated:Config.capture)
}

// -------------------------------------------------------------------

// ServerMessage

// string session_id = 1;
inline void ServerMessage::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerMessage::session_id() const {
  // @@protoc_insertion_point(field_get:ServerMessage.session_id)
  return _internal_session_id();
}
inline void ServerMessage::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ServerMessage.session_id)
}
inline std::string* ServerMessage::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ServerMessage::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void ServerMessage::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerMessage::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.session_id)
}
inline void ServerMessage::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.session_id)
}
inline void ServerMessage::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.session_id)
}
inline std::string* ServerMessage::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerMessage::release_session_id() {
  // @@protoc_insertion_point(field_release:ServerMessage.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMessage::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.session_id)
}

// .ServerMessage.Type message_type = 2;
inline void ServerMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::ServerMessage_Type ServerMessage::_internal_message_type() const {
  return static_cast< ::ServerMessage_Type >(message_type_);
}
inline ::ServerMessage_Type ServerMessage::message_type() const {
  // @@protoc_insertion_point(field_get:ServerMessage.message_type)
  return _internal_message_type();
}
inline void ServerMessage::_internal_set_message_type(::ServerMessage_Type value) {
  
  message_type_ = value;
}
inline void ServerMessage::set_message_type(::ServerMessage_Type value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:ServerMessage.message_type)
}

// .Config config = 3;
inline bool ServerMessage::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool ServerMessage::has_config() const {
  return _internal_has_config();
}
inline void ServerMessage::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::Config& ServerMessage::_internal_config() const {
  const ::Config* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Config*>(
      &::_Config_default_instance_);
}
inline const ::Config& ServerMessage::config() const {
  // @@protoc_insertion_point(field_get:ServerMessage.config)
  return _internal_config();
}
inline ::Config* ServerMessage::release_config() {
  // @@protoc_insertion_point(field_release:ServerMessage.config)
  
  ::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::Config* ServerMessage::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::Config* ServerMessage::mutable_config() {
  // @@protoc_insertion_point(field_mutable:ServerMessage.config)
  return _internal_mutable_config();
}
inline void ServerMessage::set_allocated_config(::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Config_CaptureConfig_CaptureMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config_CaptureConfig_CaptureMode>() {
  return ::Config_CaptureConfig_CaptureMode_descriptor();
}
template <> struct is_proto_enum< ::ServerMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerMessage_Type>() {
  return ::ServerMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::Position> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Position>() {
  return ::Position_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2eproto
