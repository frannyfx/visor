// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2eproto;
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ClientMessage_Bookmark;
class ClientMessage_BookmarkDefaultTypeInternal;
extern ClientMessage_BookmarkDefaultTypeInternal _ClientMessage_Bookmark_default_instance_;
class ClientMessage_Bookmark_CSGODeepIntegration;
class ClientMessage_Bookmark_CSGODeepIntegrationDefaultTypeInternal;
extern ClientMessage_Bookmark_CSGODeepIntegrationDefaultTypeInternal _ClientMessage_Bookmark_CSGODeepIntegration_default_instance_;
class ClientMessage_Bookmark_CSGODeepIntegration_KillDetails;
class ClientMessage_Bookmark_CSGODeepIntegration_KillDetailsDefaultTypeInternal;
extern ClientMessage_Bookmark_CSGODeepIntegration_KillDetailsDefaultTypeInternal _ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_default_instance_;
class ClientMessage_Frame;
class ClientMessage_FrameDefaultTypeInternal;
extern ClientMessage_FrameDefaultTypeInternal _ClientMessage_Frame_default_instance_;
class ClientMessage_Hello;
class ClientMessage_HelloDefaultTypeInternal;
extern ClientMessage_HelloDefaultTypeInternal _ClientMessage_Hello_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientMessage* Arena::CreateMaybeMessage<::ClientMessage>(Arena*);
template<> ::ClientMessage_Bookmark* Arena::CreateMaybeMessage<::ClientMessage_Bookmark>(Arena*);
template<> ::ClientMessage_Bookmark_CSGODeepIntegration* Arena::CreateMaybeMessage<::ClientMessage_Bookmark_CSGODeepIntegration>(Arena*);
template<> ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* Arena::CreateMaybeMessage<::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails>(Arena*);
template<> ::ClientMessage_Frame* Arena::CreateMaybeMessage<::ClientMessage_Frame>(Arena*);
template<> ::ClientMessage_Hello* Arena::CreateMaybeMessage<::ClientMessage_Hello>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent : int {
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_MATCH_START = 0,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_MATCH_END = 1,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_ROUND_START = 2,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_ROUND_END = 3,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_KILL = 4,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_DEATH = 5,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_SUICIDE = 6,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_HOSTAGE_RESCUED = 7,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_BOMB_PLANTED = 8,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_BOMB_DEFUSED = 9,
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_IsValid(int value);
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_MIN = ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_MATCH_START;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_MAX = ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_BOMB_DEFUSED;
constexpr int ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_ARRAYSIZE = ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_descriptor();
template<typename T>
inline const std::string& ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_descriptor(), enum_t_value);
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_Parse(
    const std::string& name, ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent>(
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_descriptor(), name, value);
}
enum ClientMessage_Bookmark_BookmarkType : int {
  ClientMessage_Bookmark_BookmarkType_NONE = 0,
  ClientMessage_Bookmark_BookmarkType_CSGO = 1,
  ClientMessage_Bookmark_BookmarkType_ClientMessage_Bookmark_BookmarkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMessage_Bookmark_BookmarkType_ClientMessage_Bookmark_BookmarkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMessage_Bookmark_BookmarkType_IsValid(int value);
constexpr ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark_BookmarkType_BookmarkType_MIN = ClientMessage_Bookmark_BookmarkType_NONE;
constexpr ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark_BookmarkType_BookmarkType_MAX = ClientMessage_Bookmark_BookmarkType_CSGO;
constexpr int ClientMessage_Bookmark_BookmarkType_BookmarkType_ARRAYSIZE = ClientMessage_Bookmark_BookmarkType_BookmarkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Bookmark_BookmarkType_descriptor();
template<typename T>
inline const std::string& ClientMessage_Bookmark_BookmarkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessage_Bookmark_BookmarkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessage_Bookmark_BookmarkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessage_Bookmark_BookmarkType_descriptor(), enum_t_value);
}
inline bool ClientMessage_Bookmark_BookmarkType_Parse(
    const std::string& name, ClientMessage_Bookmark_BookmarkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_Bookmark_BookmarkType>(
    ClientMessage_Bookmark_BookmarkType_descriptor(), name, value);
}
enum ClientMessage_Type : int {
  ClientMessage_Type_HELLO = 0,
  ClientMessage_Type_CAPTURE_STARTED = 1,
  ClientMessage_Type_CAPTURE_STOPPED = 2,
  ClientMessage_Type_CAPTURE_ERROR = 3,
  ClientMessage_Type_FRAME = 4,
  ClientMessage_Type_BOOKMARK = 5,
  ClientMessage_Type_ClientMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMessage_Type_ClientMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMessage_Type_IsValid(int value);
constexpr ClientMessage_Type ClientMessage_Type_Type_MIN = ClientMessage_Type_HELLO;
constexpr ClientMessage_Type ClientMessage_Type_Type_MAX = ClientMessage_Type_BOOKMARK;
constexpr int ClientMessage_Type_Type_ARRAYSIZE = ClientMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Type_descriptor();
template<typename T>
inline const std::string& ClientMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessage_Type_descriptor(), enum_t_value);
}
inline bool ClientMessage_Type_Parse(
    const std::string& name, ClientMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessage_Type>(
    ClientMessage_Type_descriptor(), name, value);
}
// ===================================================================

class ClientMessage_Hello :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.Hello) */ {
 public:
  ClientMessage_Hello();
  virtual ~ClientMessage_Hello();

  ClientMessage_Hello(const ClientMessage_Hello& from);
  ClientMessage_Hello(ClientMessage_Hello&& from) noexcept
    : ClientMessage_Hello() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Hello& operator=(const ClientMessage_Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Hello& operator=(ClientMessage_Hello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Hello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage_Hello* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Hello*>(
               &_ClientMessage_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage_Hello& a, ClientMessage_Hello& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Hello* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Hello* New() const final {
    return CreateMaybeMessage<ClientMessage_Hello>(nullptr);
  }

  ClientMessage_Hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Hello& from);
  void MergeFrom(const ClientMessage_Hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.Hello";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_2eproto);
    return ::descriptor_table_client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutablePathFieldNumber = 2,
    kWindowTitleFieldNumber = 3,
    kPidFieldNumber = 1,
  };
  // string executable_path = 2;
  void clear_executable_path();
  const std::string& executable_path() const;
  void set_executable_path(const std::string& value);
  void set_executable_path(std::string&& value);
  void set_executable_path(const char* value);
  void set_executable_path(const char* value, size_t size);
  std::string* mutable_executable_path();
  std::string* release_executable_path();
  void set_allocated_executable_path(std::string* executable_path);
  private:
  const std::string& _internal_executable_path() const;
  void _internal_set_executable_path(const std::string& value);
  std::string* _internal_mutable_executable_path();
  public:

  // string window_title = 3;
  void clear_window_title();
  const std::string& window_title() const;
  void set_window_title(const std::string& value);
  void set_window_title(std::string&& value);
  void set_window_title(const char* value);
  void set_window_title(const char* value, size_t size);
  std::string* mutable_window_title();
  std::string* release_window_title();
  void set_allocated_window_title(std::string* window_title);
  private:
  const std::string& _internal_window_title() const;
  void _internal_set_window_title(const std::string& value);
  std::string* _internal_mutable_window_title();
  public:

  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.Hello)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executable_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_title_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.Frame) */ {
 public:
  ClientMessage_Frame();
  virtual ~ClientMessage_Frame();

  ClientMessage_Frame(const ClientMessage_Frame& from);
  ClientMessage_Frame(ClientMessage_Frame&& from) noexcept
    : ClientMessage_Frame() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Frame& operator=(const ClientMessage_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Frame& operator=(ClientMessage_Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage_Frame* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Frame*>(
               &_ClientMessage_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientMessage_Frame& a, ClientMessage_Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Frame* New() const final {
    return CreateMaybeMessage<ClientMessage_Frame>(nullptr);
  }

  ClientMessage_Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Frame& from);
  void MergeFrom(const ClientMessage_Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_2eproto);
    return ::descriptor_table_client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
  };
  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_Bookmark_CSGODeepIntegration_KillDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails) */ {
 public:
  ClientMessage_Bookmark_CSGODeepIntegration_KillDetails();
  virtual ~ClientMessage_Bookmark_CSGODeepIntegration_KillDetails();

  ClientMessage_Bookmark_CSGODeepIntegration_KillDetails(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from);
  ClientMessage_Bookmark_CSGODeepIntegration_KillDetails(ClientMessage_Bookmark_CSGODeepIntegration_KillDetails&& from) noexcept
    : ClientMessage_Bookmark_CSGODeepIntegration_KillDetails() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& operator=(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& operator=(ClientMessage_Bookmark_CSGODeepIntegration_KillDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails*>(
               &_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& a, ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* New() const final {
    return CreateMaybeMessage<ClientMessage_Bookmark_CSGODeepIntegration_KillDetails>(nullptr);
  }

  ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Bookmark_CSGODeepIntegration_KillDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from);
  void MergeFrom(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.Bookmark.CSGODeepIntegration.KillDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_2eproto);
    return ::descriptor_table_client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsHeadshotFieldNumber = 1,
    kIsWallbangFieldNumber = 2,
    kWithAssistFieldNumber = 3,
    kThroughSmokeFieldNumber = 4,
    kWhileBlindedFieldNumber = 5,
  };
  // bool is_headshot = 1;
  void clear_is_headshot();
  bool is_headshot() const;
  void set_is_headshot(bool value);
  private:
  bool _internal_is_headshot() const;
  void _internal_set_is_headshot(bool value);
  public:

  // bool is_wallbang = 2;
  void clear_is_wallbang();
  bool is_wallbang() const;
  void set_is_wallbang(bool value);
  private:
  bool _internal_is_wallbang() const;
  void _internal_set_is_wallbang(bool value);
  public:

  // bool with_assist = 3;
  void clear_with_assist();
  bool with_assist() const;
  void set_with_assist(bool value);
  private:
  bool _internal_with_assist() const;
  void _internal_set_with_assist(bool value);
  public:

  // bool through_smoke = 4;
  void clear_through_smoke();
  bool through_smoke() const;
  void set_through_smoke(bool value);
  private:
  bool _internal_through_smoke() const;
  void _internal_set_through_smoke(bool value);
  public:

  // bool while_blinded = 5;
  void clear_while_blinded();
  bool while_blinded() const;
  void set_while_blinded(bool value);
  private:
  bool _internal_while_blinded() const;
  void _internal_set_while_blinded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_headshot_;
  bool is_wallbang_;
  bool with_assist_;
  bool through_smoke_;
  bool while_blinded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_Bookmark_CSGODeepIntegration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.Bookmark.CSGODeepIntegration) */ {
 public:
  ClientMessage_Bookmark_CSGODeepIntegration();
  virtual ~ClientMessage_Bookmark_CSGODeepIntegration();

  ClientMessage_Bookmark_CSGODeepIntegration(const ClientMessage_Bookmark_CSGODeepIntegration& from);
  ClientMessage_Bookmark_CSGODeepIntegration(ClientMessage_Bookmark_CSGODeepIntegration&& from) noexcept
    : ClientMessage_Bookmark_CSGODeepIntegration() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Bookmark_CSGODeepIntegration& operator=(const ClientMessage_Bookmark_CSGODeepIntegration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Bookmark_CSGODeepIntegration& operator=(ClientMessage_Bookmark_CSGODeepIntegration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Bookmark_CSGODeepIntegration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage_Bookmark_CSGODeepIntegration* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Bookmark_CSGODeepIntegration*>(
               &_ClientMessage_Bookmark_CSGODeepIntegration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientMessage_Bookmark_CSGODeepIntegration& a, ClientMessage_Bookmark_CSGODeepIntegration& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Bookmark_CSGODeepIntegration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Bookmark_CSGODeepIntegration* New() const final {
    return CreateMaybeMessage<ClientMessage_Bookmark_CSGODeepIntegration>(nullptr);
  }

  ClientMessage_Bookmark_CSGODeepIntegration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Bookmark_CSGODeepIntegration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Bookmark_CSGODeepIntegration& from);
  void MergeFrom(const ClientMessage_Bookmark_CSGODeepIntegration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Bookmark_CSGODeepIntegration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.Bookmark.CSGODeepIntegration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_2eproto);
    return ::descriptor_table_client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_Bookmark_CSGODeepIntegration_KillDetails KillDetails;

  typedef ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent CSGOEvent;
  static constexpr CSGOEvent MATCH_START =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_MATCH_START;
  static constexpr CSGOEvent MATCH_END =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_MATCH_END;
  static constexpr CSGOEvent ROUND_START =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_ROUND_START;
  static constexpr CSGOEvent ROUND_END =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_ROUND_END;
  static constexpr CSGOEvent KILL =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_KILL;
  static constexpr CSGOEvent DEATH =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_DEATH;
  static constexpr CSGOEvent SUICIDE =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_SUICIDE;
  static constexpr CSGOEvent HOSTAGE_RESCUED =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_HOSTAGE_RESCUED;
  static constexpr CSGOEvent BOMB_PLANTED =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_BOMB_PLANTED;
  static constexpr CSGOEvent BOMB_DEFUSED =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_BOMB_DEFUSED;
  static inline bool CSGOEvent_IsValid(int value) {
    return ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_IsValid(value);
  }
  static constexpr CSGOEvent CSGOEvent_MIN =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_MIN;
  static constexpr CSGOEvent CSGOEvent_MAX =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_MAX;
  static constexpr int CSGOEvent_ARRAYSIZE =
    ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_CSGOEvent_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CSGOEvent_descriptor() {
    return ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_descriptor();
  }
  template<typename T>
  static inline const std::string& CSGOEvent_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CSGOEvent>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CSGOEvent_Name.");
    return ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_Name(enum_t_value);
  }
  static inline bool CSGOEvent_Parse(const std::string& name,
      CSGOEvent* value) {
    return ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKillDetailsFieldNumber = 3,
    kEventFieldNumber = 1,
    kIsCompetitiveFieldNumber = 2,
  };
  // .ClientMessage.Bookmark.CSGODeepIntegration.KillDetails kill_details = 3;
  bool has_kill_details() const;
  private:
  bool _internal_has_kill_details() const;
  public:
  void clear_kill_details();
  const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& kill_details() const;
  ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* release_kill_details();
  ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* mutable_kill_details();
  void set_allocated_kill_details(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* kill_details);
  private:
  const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& _internal_kill_details() const;
  ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* _internal_mutable_kill_details();
  public:

  // .ClientMessage.Bookmark.CSGODeepIntegration.CSGOEvent event = 1;
  void clear_event();
  ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent event() const;
  void set_event(::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent value);
  private:
  ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent _internal_event() const;
  void _internal_set_event(::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent value);
  public:

  // bool is_competitive = 2;
  void clear_is_competitive();
  bool is_competitive() const;
  void set_is_competitive(bool value);
  private:
  bool _internal_is_competitive() const;
  void _internal_set_is_competitive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.Bookmark.CSGODeepIntegration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* kill_details_;
  int event_;
  bool is_competitive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_Bookmark :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage.Bookmark) */ {
 public:
  ClientMessage_Bookmark();
  virtual ~ClientMessage_Bookmark();

  ClientMessage_Bookmark(const ClientMessage_Bookmark& from);
  ClientMessage_Bookmark(ClientMessage_Bookmark&& from) noexcept
    : ClientMessage_Bookmark() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Bookmark& operator=(const ClientMessage_Bookmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Bookmark& operator=(ClientMessage_Bookmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Bookmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage_Bookmark* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Bookmark*>(
               &_ClientMessage_Bookmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientMessage_Bookmark& a, ClientMessage_Bookmark& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Bookmark* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Bookmark* New() const final {
    return CreateMaybeMessage<ClientMessage_Bookmark>(nullptr);
  }

  ClientMessage_Bookmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Bookmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Bookmark& from);
  void MergeFrom(const ClientMessage_Bookmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Bookmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage.Bookmark";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_2eproto);
    return ::descriptor_table_client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_Bookmark_CSGODeepIntegration CSGODeepIntegration;

  typedef ClientMessage_Bookmark_BookmarkType BookmarkType;
  static constexpr BookmarkType NONE =
    ClientMessage_Bookmark_BookmarkType_NONE;
  static constexpr BookmarkType CSGO =
    ClientMessage_Bookmark_BookmarkType_CSGO;
  static inline bool BookmarkType_IsValid(int value) {
    return ClientMessage_Bookmark_BookmarkType_IsValid(value);
  }
  static constexpr BookmarkType BookmarkType_MIN =
    ClientMessage_Bookmark_BookmarkType_BookmarkType_MIN;
  static constexpr BookmarkType BookmarkType_MAX =
    ClientMessage_Bookmark_BookmarkType_BookmarkType_MAX;
  static constexpr int BookmarkType_ARRAYSIZE =
    ClientMessage_Bookmark_BookmarkType_BookmarkType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BookmarkType_descriptor() {
    return ClientMessage_Bookmark_BookmarkType_descriptor();
  }
  template<typename T>
  static inline const std::string& BookmarkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BookmarkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BookmarkType_Name.");
    return ClientMessage_Bookmark_BookmarkType_Name(enum_t_value);
  }
  static inline bool BookmarkType_Parse(const std::string& name,
      BookmarkType* value) {
    return ClientMessage_Bookmark_BookmarkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCsgoFieldNumber = 3,
    kIsManualFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .ClientMessage.Bookmark.CSGODeepIntegration csgo = 3;
  bool has_csgo() const;
  private:
  bool _internal_has_csgo() const;
  public:
  void clear_csgo();
  const ::ClientMessage_Bookmark_CSGODeepIntegration& csgo() const;
  ::ClientMessage_Bookmark_CSGODeepIntegration* release_csgo();
  ::ClientMessage_Bookmark_CSGODeepIntegration* mutable_csgo();
  void set_allocated_csgo(::ClientMessage_Bookmark_CSGODeepIntegration* csgo);
  private:
  const ::ClientMessage_Bookmark_CSGODeepIntegration& _internal_csgo() const;
  ::ClientMessage_Bookmark_CSGODeepIntegration* _internal_mutable_csgo();
  public:

  // bool is_manual = 1;
  void clear_is_manual();
  bool is_manual() const;
  void set_is_manual(bool value);
  private:
  bool _internal_is_manual() const;
  void _internal_set_is_manual(bool value);
  public:

  // .ClientMessage.Bookmark.BookmarkType type = 2;
  void clear_type();
  ::ClientMessage_Bookmark_BookmarkType type() const;
  void set_type(::ClientMessage_Bookmark_BookmarkType value);
  private:
  ::ClientMessage_Bookmark_BookmarkType _internal_type() const;
  void _internal_set_type(::ClientMessage_Bookmark_BookmarkType value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage.Bookmark)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ClientMessage_Bookmark_CSGODeepIntegration* csgo_;
  bool is_manual_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_2eproto);
    return ::descriptor_table_client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_Hello Hello;
  typedef ClientMessage_Frame Frame;
  typedef ClientMessage_Bookmark Bookmark;

  typedef ClientMessage_Type Type;
  static constexpr Type HELLO =
    ClientMessage_Type_HELLO;
  static constexpr Type CAPTURE_STARTED =
    ClientMessage_Type_CAPTURE_STARTED;
  static constexpr Type CAPTURE_STOPPED =
    ClientMessage_Type_CAPTURE_STOPPED;
  static constexpr Type CAPTURE_ERROR =
    ClientMessage_Type_CAPTURE_ERROR;
  static constexpr Type FRAME =
    ClientMessage_Type_FRAME;
  static constexpr Type BOOKMARK =
    ClientMessage_Type_BOOKMARK;
  static inline bool Type_IsValid(int value) {
    return ClientMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ClientMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ClientMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ClientMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ClientMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ClientMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return ClientMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHelloFieldNumber = 2,
    kFrameFieldNumber = 3,
    kBookmarkFieldNumber = 4,
    kMessageTypeFieldNumber = 1,
  };
  // .ClientMessage.Hello hello = 2;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const ::ClientMessage_Hello& hello() const;
  ::ClientMessage_Hello* release_hello();
  ::ClientMessage_Hello* mutable_hello();
  void set_allocated_hello(::ClientMessage_Hello* hello);
  private:
  const ::ClientMessage_Hello& _internal_hello() const;
  ::ClientMessage_Hello* _internal_mutable_hello();
  public:

  // .ClientMessage.Frame frame = 3;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::ClientMessage_Frame& frame() const;
  ::ClientMessage_Frame* release_frame();
  ::ClientMessage_Frame* mutable_frame();
  void set_allocated_frame(::ClientMessage_Frame* frame);
  private:
  const ::ClientMessage_Frame& _internal_frame() const;
  ::ClientMessage_Frame* _internal_mutable_frame();
  public:

  // .ClientMessage.Bookmark bookmark = 4;
  bool has_bookmark() const;
  private:
  bool _internal_has_bookmark() const;
  public:
  void clear_bookmark();
  const ::ClientMessage_Bookmark& bookmark() const;
  ::ClientMessage_Bookmark* release_bookmark();
  ::ClientMessage_Bookmark* mutable_bookmark();
  void set_allocated_bookmark(::ClientMessage_Bookmark* bookmark);
  private:
  const ::ClientMessage_Bookmark& _internal_bookmark() const;
  ::ClientMessage_Bookmark* _internal_mutable_bookmark();
  public:

  // .ClientMessage.Type message_type = 1;
  void clear_message_type();
  ::ClientMessage_Type message_type() const;
  void set_message_type(::ClientMessage_Type value);
  private:
  ::ClientMessage_Type _internal_message_type() const;
  void _internal_set_message_type(::ClientMessage_Type value);
  public:

  // @@protoc_insertion_point(class_scope:ClientMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ClientMessage_Hello* hello_;
  ::ClientMessage_Frame* frame_;
  ::ClientMessage_Bookmark* bookmark_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage_Hello

// int32 pid = 1;
inline void ClientMessage_Hello::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage_Hello::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMessage_Hello::pid() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Hello.pid)
  return _internal_pid();
}
inline void ClientMessage_Hello::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void ClientMessage_Hello::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Hello.pid)
}

// string executable_path = 2;
inline void ClientMessage_Hello::clear_executable_path() {
  executable_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientMessage_Hello::executable_path() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Hello.executable_path)
  return _internal_executable_path();
}
inline void ClientMessage_Hello::set_executable_path(const std::string& value) {
  _internal_set_executable_path(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Hello.executable_path)
}
inline std::string* ClientMessage_Hello::mutable_executable_path() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.Hello.executable_path)
  return _internal_mutable_executable_path();
}
inline const std::string& ClientMessage_Hello::_internal_executable_path() const {
  return executable_path_.GetNoArena();
}
inline void ClientMessage_Hello::_internal_set_executable_path(const std::string& value) {
  
  executable_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientMessage_Hello::set_executable_path(std::string&& value) {
  
  executable_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientMessage.Hello.executable_path)
}
inline void ClientMessage_Hello::set_executable_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  executable_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientMessage.Hello.executable_path)
}
inline void ClientMessage_Hello::set_executable_path(const char* value, size_t size) {
  
  executable_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientMessage.Hello.executable_path)
}
inline std::string* ClientMessage_Hello::_internal_mutable_executable_path() {
  
  return executable_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientMessage_Hello::release_executable_path() {
  // @@protoc_insertion_point(field_release:ClientMessage.Hello.executable_path)
  
  return executable_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage_Hello::set_allocated_executable_path(std::string* executable_path) {
  if (executable_path != nullptr) {
    
  } else {
    
  }
  executable_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), executable_path);
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.Hello.executable_path)
}

// string window_title = 3;
inline void ClientMessage_Hello::clear_window_title() {
  window_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientMessage_Hello::window_title() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Hello.window_title)
  return _internal_window_title();
}
inline void ClientMessage_Hello::set_window_title(const std::string& value) {
  _internal_set_window_title(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Hello.window_title)
}
inline std::string* ClientMessage_Hello::mutable_window_title() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.Hello.window_title)
  return _internal_mutable_window_title();
}
inline const std::string& ClientMessage_Hello::_internal_window_title() const {
  return window_title_.GetNoArena();
}
inline void ClientMessage_Hello::_internal_set_window_title(const std::string& value) {
  
  window_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientMessage_Hello::set_window_title(std::string&& value) {
  
  window_title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientMessage.Hello.window_title)
}
inline void ClientMessage_Hello::set_window_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  window_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientMessage.Hello.window_title)
}
inline void ClientMessage_Hello::set_window_title(const char* value, size_t size) {
  
  window_title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientMessage.Hello.window_title)
}
inline std::string* ClientMessage_Hello::_internal_mutable_window_title() {
  
  return window_title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientMessage_Hello::release_window_title() {
  // @@protoc_insertion_point(field_release:ClientMessage.Hello.window_title)
  
  return window_title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage_Hello::set_allocated_window_title(std::string* window_title) {
  if (window_title != nullptr) {
    
  } else {
    
  }
  window_title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_title);
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.Hello.window_title)
}

// -------------------------------------------------------------------

// ClientMessage_Frame

// bytes buffer = 1;
inline void ClientMessage_Frame::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientMessage_Frame::buffer() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Frame.buffer)
  return _internal_buffer();
}
inline void ClientMessage_Frame::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Frame.buffer)
}
inline std::string* ClientMessage_Frame::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.Frame.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& ClientMessage_Frame::_internal_buffer() const {
  return buffer_.GetNoArena();
}
inline void ClientMessage_Frame::_internal_set_buffer(const std::string& value) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClientMessage_Frame::set_buffer(std::string&& value) {
  
  buffer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ClientMessage.Frame.buffer)
}
inline void ClientMessage_Frame::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClientMessage.Frame.buffer)
}
inline void ClientMessage_Frame::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClientMessage.Frame.buffer)
}
inline std::string* ClientMessage_Frame::_internal_mutable_buffer() {
  
  return buffer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientMessage_Frame::release_buffer() {
  // @@protoc_insertion_point(field_release:ClientMessage.Frame.buffer)
  
  return buffer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientMessage_Frame::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.Frame.buffer)
}

// -------------------------------------------------------------------

// ClientMessage_Bookmark_CSGODeepIntegration_KillDetails

// bool is_headshot = 1;
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::clear_is_headshot() {
  is_headshot_ = false;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_is_headshot() const {
  return is_headshot_;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::is_headshot() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.is_headshot)
  return _internal_is_headshot();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_set_is_headshot(bool value) {
  
  is_headshot_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::set_is_headshot(bool value) {
  _internal_set_is_headshot(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.is_headshot)
}

// bool is_wallbang = 2;
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::clear_is_wallbang() {
  is_wallbang_ = false;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_is_wallbang() const {
  return is_wallbang_;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::is_wallbang() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.is_wallbang)
  return _internal_is_wallbang();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_set_is_wallbang(bool value) {
  
  is_wallbang_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::set_is_wallbang(bool value) {
  _internal_set_is_wallbang(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.is_wallbang)
}

// bool with_assist = 3;
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::clear_with_assist() {
  with_assist_ = false;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_with_assist() const {
  return with_assist_;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::with_assist() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.with_assist)
  return _internal_with_assist();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_set_with_assist(bool value) {
  
  with_assist_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::set_with_assist(bool value) {
  _internal_set_with_assist(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.with_assist)
}

// bool through_smoke = 4;
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::clear_through_smoke() {
  through_smoke_ = false;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_through_smoke() const {
  return through_smoke_;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::through_smoke() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.through_smoke)
  return _internal_through_smoke();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_set_through_smoke(bool value) {
  
  through_smoke_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::set_through_smoke(bool value) {
  _internal_set_through_smoke(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.through_smoke)
}

// bool while_blinded = 5;
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::clear_while_blinded() {
  while_blinded_ = false;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_while_blinded() const {
  return while_blinded_;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::while_blinded() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.while_blinded)
  return _internal_while_blinded();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_internal_set_while_blinded(bool value) {
  
  while_blinded_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::set_while_blinded(bool value) {
  _internal_set_while_blinded(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails.while_blinded)
}

// -------------------------------------------------------------------

// ClientMessage_Bookmark_CSGODeepIntegration

// .ClientMessage.Bookmark.CSGODeepIntegration.CSGOEvent event = 1;
inline void ClientMessage_Bookmark_CSGODeepIntegration::clear_event() {
  event_ = 0;
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::_internal_event() const {
  return static_cast< ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent >(event_);
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::event() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.event)
  return _internal_event();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration::_internal_set_event(::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent value) {
  
  event_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration::set_event(::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.event)
}

// bool is_competitive = 2;
inline void ClientMessage_Bookmark_CSGODeepIntegration::clear_is_competitive() {
  is_competitive_ = false;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration::_internal_is_competitive() const {
  return is_competitive_;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration::is_competitive() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.is_competitive)
  return _internal_is_competitive();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration::_internal_set_is_competitive(bool value) {
  
  is_competitive_ = value;
}
inline void ClientMessage_Bookmark_CSGODeepIntegration::set_is_competitive(bool value) {
  _internal_set_is_competitive(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.CSGODeepIntegration.is_competitive)
}

// .ClientMessage.Bookmark.CSGODeepIntegration.KillDetails kill_details = 3;
inline bool ClientMessage_Bookmark_CSGODeepIntegration::_internal_has_kill_details() const {
  return this != internal_default_instance() && kill_details_ != nullptr;
}
inline bool ClientMessage_Bookmark_CSGODeepIntegration::has_kill_details() const {
  return _internal_has_kill_details();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration::clear_kill_details() {
  if (GetArenaNoVirtual() == nullptr && kill_details_ != nullptr) {
    delete kill_details_;
  }
  kill_details_ = nullptr;
}
inline const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& ClientMessage_Bookmark_CSGODeepIntegration::_internal_kill_details() const {
  const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* p = kill_details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails*>(
      &::_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_default_instance_);
}
inline const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& ClientMessage_Bookmark_CSGODeepIntegration::kill_details() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.CSGODeepIntegration.kill_details)
  return _internal_kill_details();
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* ClientMessage_Bookmark_CSGODeepIntegration::release_kill_details() {
  // @@protoc_insertion_point(field_release:ClientMessage.Bookmark.CSGODeepIntegration.kill_details)
  
  ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* temp = kill_details_;
  kill_details_ = nullptr;
  return temp;
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* ClientMessage_Bookmark_CSGODeepIntegration::_internal_mutable_kill_details() {
  
  if (kill_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails>(GetArenaNoVirtual());
    kill_details_ = p;
  }
  return kill_details_;
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* ClientMessage_Bookmark_CSGODeepIntegration::mutable_kill_details() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.Bookmark.CSGODeepIntegration.kill_details)
  return _internal_mutable_kill_details();
}
inline void ClientMessage_Bookmark_CSGODeepIntegration::set_allocated_kill_details(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* kill_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kill_details_;
  }
  if (kill_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kill_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kill_details, submessage_arena);
    }
    
  } else {
    
  }
  kill_details_ = kill_details;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.Bookmark.CSGODeepIntegration.kill_details)
}

// -------------------------------------------------------------------

// ClientMessage_Bookmark

// bool is_manual = 1;
inline void ClientMessage_Bookmark::clear_is_manual() {
  is_manual_ = false;
}
inline bool ClientMessage_Bookmark::_internal_is_manual() const {
  return is_manual_;
}
inline bool ClientMessage_Bookmark::is_manual() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.is_manual)
  return _internal_is_manual();
}
inline void ClientMessage_Bookmark::_internal_set_is_manual(bool value) {
  
  is_manual_ = value;
}
inline void ClientMessage_Bookmark::set_is_manual(bool value) {
  _internal_set_is_manual(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.is_manual)
}

// .ClientMessage.Bookmark.BookmarkType type = 2;
inline void ClientMessage_Bookmark::clear_type() {
  type_ = 0;
}
inline ::ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark::_internal_type() const {
  return static_cast< ::ClientMessage_Bookmark_BookmarkType >(type_);
}
inline ::ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark::type() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.type)
  return _internal_type();
}
inline void ClientMessage_Bookmark::_internal_set_type(::ClientMessage_Bookmark_BookmarkType value) {
  
  type_ = value;
}
inline void ClientMessage_Bookmark::set_type(::ClientMessage_Bookmark_BookmarkType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ClientMessage.Bookmark.type)
}

// .ClientMessage.Bookmark.CSGODeepIntegration csgo = 3;
inline bool ClientMessage_Bookmark::_internal_has_csgo() const {
  return this != internal_default_instance() && csgo_ != nullptr;
}
inline bool ClientMessage_Bookmark::has_csgo() const {
  return _internal_has_csgo();
}
inline void ClientMessage_Bookmark::clear_csgo() {
  if (GetArenaNoVirtual() == nullptr && csgo_ != nullptr) {
    delete csgo_;
  }
  csgo_ = nullptr;
}
inline const ::ClientMessage_Bookmark_CSGODeepIntegration& ClientMessage_Bookmark::_internal_csgo() const {
  const ::ClientMessage_Bookmark_CSGODeepIntegration* p = csgo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage_Bookmark_CSGODeepIntegration*>(
      &::_ClientMessage_Bookmark_CSGODeepIntegration_default_instance_);
}
inline const ::ClientMessage_Bookmark_CSGODeepIntegration& ClientMessage_Bookmark::csgo() const {
  // @@protoc_insertion_point(field_get:ClientMessage.Bookmark.csgo)
  return _internal_csgo();
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration* ClientMessage_Bookmark::release_csgo() {
  // @@protoc_insertion_point(field_release:ClientMessage.Bookmark.csgo)
  
  ::ClientMessage_Bookmark_CSGODeepIntegration* temp = csgo_;
  csgo_ = nullptr;
  return temp;
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration* ClientMessage_Bookmark::_internal_mutable_csgo() {
  
  if (csgo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage_Bookmark_CSGODeepIntegration>(GetArenaNoVirtual());
    csgo_ = p;
  }
  return csgo_;
}
inline ::ClientMessage_Bookmark_CSGODeepIntegration* ClientMessage_Bookmark::mutable_csgo() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.Bookmark.csgo)
  return _internal_mutable_csgo();
}
inline void ClientMessage_Bookmark::set_allocated_csgo(::ClientMessage_Bookmark_CSGODeepIntegration* csgo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete csgo_;
  }
  if (csgo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      csgo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csgo, submessage_arena);
    }
    
  } else {
    
  }
  csgo_ = csgo;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.Bookmark.csgo)
}

// -------------------------------------------------------------------

// ClientMessage

// .ClientMessage.Type message_type = 1;
inline void ClientMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::ClientMessage_Type ClientMessage::_internal_message_type() const {
  return static_cast< ::ClientMessage_Type >(message_type_);
}
inline ::ClientMessage_Type ClientMessage::message_type() const {
  // @@protoc_insertion_point(field_get:ClientMessage.message_type)
  return _internal_message_type();
}
inline void ClientMessage::_internal_set_message_type(::ClientMessage_Type value) {
  
  message_type_ = value;
}
inline void ClientMessage::set_message_type(::ClientMessage_Type value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:ClientMessage.message_type)
}

// .ClientMessage.Hello hello = 2;
inline bool ClientMessage::_internal_has_hello() const {
  return this != internal_default_instance() && hello_ != nullptr;
}
inline bool ClientMessage::has_hello() const {
  return _internal_has_hello();
}
inline void ClientMessage::clear_hello() {
  if (GetArenaNoVirtual() == nullptr && hello_ != nullptr) {
    delete hello_;
  }
  hello_ = nullptr;
}
inline const ::ClientMessage_Hello& ClientMessage::_internal_hello() const {
  const ::ClientMessage_Hello* p = hello_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage_Hello*>(
      &::_ClientMessage_Hello_default_instance_);
}
inline const ::ClientMessage_Hello& ClientMessage::hello() const {
  // @@protoc_insertion_point(field_get:ClientMessage.hello)
  return _internal_hello();
}
inline ::ClientMessage_Hello* ClientMessage::release_hello() {
  // @@protoc_insertion_point(field_release:ClientMessage.hello)
  
  ::ClientMessage_Hello* temp = hello_;
  hello_ = nullptr;
  return temp;
}
inline ::ClientMessage_Hello* ClientMessage::_internal_mutable_hello() {
  
  if (hello_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage_Hello>(GetArenaNoVirtual());
    hello_ = p;
  }
  return hello_;
}
inline ::ClientMessage_Hello* ClientMessage::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.hello)
  return _internal_mutable_hello();
}
inline void ClientMessage::set_allocated_hello(::ClientMessage_Hello* hello) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hello_;
  }
  if (hello) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hello = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hello, submessage_arena);
    }
    
  } else {
    
  }
  hello_ = hello;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.hello)
}

// .ClientMessage.Frame frame = 3;
inline bool ClientMessage::_internal_has_frame() const {
  return this != internal_default_instance() && frame_ != nullptr;
}
inline bool ClientMessage::has_frame() const {
  return _internal_has_frame();
}
inline void ClientMessage::clear_frame() {
  if (GetArenaNoVirtual() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
}
inline const ::ClientMessage_Frame& ClientMessage::_internal_frame() const {
  const ::ClientMessage_Frame* p = frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage_Frame*>(
      &::_ClientMessage_Frame_default_instance_);
}
inline const ::ClientMessage_Frame& ClientMessage::frame() const {
  // @@protoc_insertion_point(field_get:ClientMessage.frame)
  return _internal_frame();
}
inline ::ClientMessage_Frame* ClientMessage::release_frame() {
  // @@protoc_insertion_point(field_release:ClientMessage.frame)
  
  ::ClientMessage_Frame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::ClientMessage_Frame* ClientMessage::_internal_mutable_frame() {
  
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage_Frame>(GetArenaNoVirtual());
    frame_ = p;
  }
  return frame_;
}
inline ::ClientMessage_Frame* ClientMessage::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.frame)
  return _internal_mutable_frame();
}
inline void ClientMessage::set_allocated_frame(::ClientMessage_Frame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.frame)
}

// .ClientMessage.Bookmark bookmark = 4;
inline bool ClientMessage::_internal_has_bookmark() const {
  return this != internal_default_instance() && bookmark_ != nullptr;
}
inline bool ClientMessage::has_bookmark() const {
  return _internal_has_bookmark();
}
inline void ClientMessage::clear_bookmark() {
  if (GetArenaNoVirtual() == nullptr && bookmark_ != nullptr) {
    delete bookmark_;
  }
  bookmark_ = nullptr;
}
inline const ::ClientMessage_Bookmark& ClientMessage::_internal_bookmark() const {
  const ::ClientMessage_Bookmark* p = bookmark_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClientMessage_Bookmark*>(
      &::_ClientMessage_Bookmark_default_instance_);
}
inline const ::ClientMessage_Bookmark& ClientMessage::bookmark() const {
  // @@protoc_insertion_point(field_get:ClientMessage.bookmark)
  return _internal_bookmark();
}
inline ::ClientMessage_Bookmark* ClientMessage::release_bookmark() {
  // @@protoc_insertion_point(field_release:ClientMessage.bookmark)
  
  ::ClientMessage_Bookmark* temp = bookmark_;
  bookmark_ = nullptr;
  return temp;
}
inline ::ClientMessage_Bookmark* ClientMessage::_internal_mutable_bookmark() {
  
  if (bookmark_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientMessage_Bookmark>(GetArenaNoVirtual());
    bookmark_ = p;
  }
  return bookmark_;
}
inline ::ClientMessage_Bookmark* ClientMessage::mutable_bookmark() {
  // @@protoc_insertion_point(field_mutable:ClientMessage.bookmark)
  return _internal_mutable_bookmark();
}
inline void ClientMessage::set_allocated_bookmark(::ClientMessage_Bookmark* bookmark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bookmark_;
  }
  if (bookmark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bookmark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookmark, submessage_arena);
    }
    
  } else {
    
  }
  bookmark_ = bookmark;
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.bookmark)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent>() {
  return ::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_descriptor();
}
template <> struct is_proto_enum< ::ClientMessage_Bookmark_BookmarkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientMessage_Bookmark_BookmarkType>() {
  return ::ClientMessage_Bookmark_BookmarkType_descriptor();
}
template <> struct is_proto_enum< ::ClientMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientMessage_Type>() {
  return ::ClientMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2eproto
