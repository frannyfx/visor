// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMessage_Bookmark_client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Frame_client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Hello_client_2eproto;
class ClientMessage_HelloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage_Hello> _instance;
} _ClientMessage_Hello_default_instance_;
class ClientMessage_FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage_Frame> _instance;
} _ClientMessage_Frame_default_instance_;
class ClientMessage_Bookmark_CSGODeepIntegration_KillDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage_Bookmark_CSGODeepIntegration_KillDetails> _instance;
} _ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_default_instance_;
class ClientMessage_Bookmark_CSGODeepIntegrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage_Bookmark_CSGODeepIntegration> _instance;
} _ClientMessage_Bookmark_CSGODeepIntegration_default_instance_;
class ClientMessage_BookmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage_Bookmark> _instance;
} _ClientMessage_Bookmark_default_instance_;
class ClientMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientMessage> _instance;
} _ClientMessage_default_instance_;
static void InitDefaultsscc_info_ClientMessage_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_default_instance_;
    new (ptr) ::ClientMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClientMessage_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ClientMessage_client_2eproto}, {
      &scc_info_ClientMessage_Hello_client_2eproto.base,
      &scc_info_ClientMessage_Frame_client_2eproto.base,
      &scc_info_ClientMessage_Bookmark_client_2eproto.base,}};

static void InitDefaultsscc_info_ClientMessage_Bookmark_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_Bookmark_default_instance_;
    new (ptr) ::ClientMessage_Bookmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage_Bookmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMessage_Bookmark_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientMessage_Bookmark_client_2eproto}, {
      &scc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto.base,}};

static void InitDefaultsscc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_Bookmark_CSGODeepIntegration_default_instance_;
    new (ptr) ::ClientMessage_Bookmark_CSGODeepIntegration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage_Bookmark_CSGODeepIntegration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto}, {
      &scc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto.base,}};

static void InitDefaultsscc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_default_instance_;
    new (ptr) ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto}, {}};

static void InitDefaultsscc_info_ClientMessage_Frame_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_Frame_default_instance_;
    new (ptr) ::ClientMessage_Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage_Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Frame_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientMessage_Frame_client_2eproto}, {}};

static void InitDefaultsscc_info_ClientMessage_Hello_client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_Hello_default_instance_;
    new (ptr) ::ClientMessage_Hello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage_Hello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientMessage_Hello_client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientMessage_Hello_client_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Hello, pid_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Hello, executable_path_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Hello, window_title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Frame, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails, is_headshot_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails, is_wallbang_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails, with_assist_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails, through_smoke_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails, while_blinded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration, event_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration, is_competitive_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark_CSGODeepIntegration, kill_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark, is_manual_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark, type_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage_Bookmark, csgo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage, hello_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage, frame_),
  PROTOBUF_FIELD_OFFSET(::ClientMessage, bookmark_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientMessage_Hello)},
  { 8, -1, sizeof(::ClientMessage_Frame)},
  { 14, -1, sizeof(::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails)},
  { 24, -1, sizeof(::ClientMessage_Bookmark_CSGODeepIntegration)},
  { 32, -1, sizeof(::ClientMessage_Bookmark)},
  { 40, -1, sizeof(::ClientMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientMessage_Hello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientMessage_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientMessage_Bookmark_CSGODeepIntegration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientMessage_Bookmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientMessage_default_instance_),
};

const char descriptor_table_protodef_client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014client.proto\"\223\010\n\rClientMessage\022)\n\014mess"
  "age_type\030\001 \001(\0162\023.ClientMessage.Type\022#\n\005h"
  "ello\030\002 \001(\0132\024.ClientMessage.Hello\022#\n\005fram"
  "e\030\003 \001(\0132\024.ClientMessage.Frame\022)\n\010bookmar"
  "k\030\004 \001(\0132\027.ClientMessage.Bookmark\032C\n\005Hell"
  "o\022\013\n\003pid\030\001 \001(\005\022\027\n\017executable_path\030\002 \001(\t\022"
  "\024\n\014window_title\030\003 \001(\t\032\027\n\005Frame\022\016\n\006buffer"
  "\030\001 \001(\014\032\232\005\n\010Bookmark\022\021\n\tis_manual\030\001 \001(\010\0222"
  "\n\004type\030\002 \001(\0162$.ClientMessage.Bookmark.Bo"
  "okmarkType\0229\n\004csgo\030\003 \001(\0132+.ClientMessage"
  ".Bookmark.CSGODeepIntegration\032\347\003\n\023CSGODe"
  "epIntegration\022D\n\005event\030\001 \001(\01625.ClientMes"
  "sage.Bookmark.CSGODeepIntegration.CSGOEv"
  "ent\022\026\n\016is_competitive\030\002 \001(\010\022M\n\014kill_deta"
  "ils\030\003 \001(\01327.ClientMessage.Bookmark.CSGOD"
  "eepIntegration.KillDetails\032z\n\013KillDetail"
  "s\022\023\n\013is_headshot\030\001 \001(\010\022\023\n\013is_wallbang\030\002 "
  "\001(\010\022\023\n\013with_assist\030\003 \001(\010\022\025\n\rthrough_smok"
  "e\030\004 \001(\010\022\025\n\rwhile_blinded\030\005 \001(\010\"\246\001\n\tCSGOE"
  "vent\022\017\n\013MATCH_START\020\000\022\r\n\tMATCH_END\020\001\022\017\n\013"
  "ROUND_START\020\002\022\r\n\tROUND_END\020\003\022\010\n\004KILL\020\004\022\t"
  "\n\005DEATH\020\005\022\013\n\007SUICIDE\020\006\022\023\n\017HOSTAGE_RESCUE"
  "D\020\007\022\020\n\014BOMB_PLANTED\020\010\022\020\n\014BOMB_DEFUSED\020\t\""
  "\"\n\014BookmarkType\022\010\n\004NONE\020\000\022\010\n\004CSGO\020\001\"g\n\004T"
  "ype\022\t\n\005HELLO\020\000\022\023\n\017CAPTURE_STARTED\020\001\022\023\n\017C"
  "APTURE_STOPPED\020\002\022\021\n\rCAPTURE_ERROR\020\003\022\t\n\005F"
  "RAME\020\004\022\014\n\010BOOKMARK\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_2eproto_sccs[6] = {
  &scc_info_ClientMessage_client_2eproto.base,
  &scc_info_ClientMessage_Bookmark_client_2eproto.base,
  &scc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto.base,
  &scc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto.base,
  &scc_info_ClientMessage_Frame_client_2eproto.base,
  &scc_info_ClientMessage_Hello_client_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_2eproto_once;
static bool descriptor_table_client_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2eproto = {
  &descriptor_table_client_2eproto_initialized, descriptor_table_protodef_client_2eproto, "client.proto", 1068,
  &descriptor_table_client_2eproto_once, descriptor_table_client_2eproto_sccs, descriptor_table_client_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_client_2eproto::offsets,
  file_level_metadata_client_2eproto, 6, file_level_enum_descriptors_client_2eproto, file_level_service_descriptors_client_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2eproto);
  return file_level_enum_descriptors_client_2eproto[0];
}
bool ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::MATCH_START;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::MATCH_END;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::ROUND_START;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::ROUND_END;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::KILL;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::DEATH;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::SUICIDE;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::HOSTAGE_RESCUED;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::BOMB_PLANTED;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::BOMB_DEFUSED;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::CSGOEvent_MIN;
constexpr ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent ClientMessage_Bookmark_CSGODeepIntegration::CSGOEvent_MAX;
constexpr int ClientMessage_Bookmark_CSGODeepIntegration::CSGOEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Bookmark_BookmarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2eproto);
  return file_level_enum_descriptors_client_2eproto[1];
}
bool ClientMessage_Bookmark_BookmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark::NONE;
constexpr ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark::CSGO;
constexpr ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark::BookmarkType_MIN;
constexpr ClientMessage_Bookmark_BookmarkType ClientMessage_Bookmark::BookmarkType_MAX;
constexpr int ClientMessage_Bookmark::BookmarkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2eproto);
  return file_level_enum_descriptors_client_2eproto[2];
}
bool ClientMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMessage_Type ClientMessage::HELLO;
constexpr ClientMessage_Type ClientMessage::CAPTURE_STARTED;
constexpr ClientMessage_Type ClientMessage::CAPTURE_STOPPED;
constexpr ClientMessage_Type ClientMessage::CAPTURE_ERROR;
constexpr ClientMessage_Type ClientMessage::FRAME;
constexpr ClientMessage_Type ClientMessage::BOOKMARK;
constexpr ClientMessage_Type ClientMessage::Type_MIN;
constexpr ClientMessage_Type ClientMessage::Type_MAX;
constexpr int ClientMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientMessage_Hello::InitAsDefaultInstance() {
}
class ClientMessage_Hello::_Internal {
 public:
};

ClientMessage_Hello::ClientMessage_Hello()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.Hello)
}
ClientMessage_Hello::ClientMessage_Hello(const ClientMessage_Hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  executable_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executable_path().empty()) {
    executable_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executable_path_);
  }
  window_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_window_title().empty()) {
    window_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.window_title_);
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ClientMessage.Hello)
}

void ClientMessage_Hello::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_Hello_client_2eproto.base);
  executable_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

ClientMessage_Hello::~ClientMessage_Hello() {
  // @@protoc_insertion_point(destructor:ClientMessage.Hello)
  SharedDtor();
}

void ClientMessage_Hello::SharedDtor() {
  executable_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientMessage_Hello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage_Hello& ClientMessage_Hello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_Hello_client_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage_Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  executable_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
  _internal_metadata_.Clear();
}

const char* ClientMessage_Hello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string executable_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_executable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientMessage.Hello.executable_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string window_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_window_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientMessage.Hello.window_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage_Hello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // string executable_path = 2;
  if (this->executable_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_executable_path().data(), static_cast<int>(this->_internal_executable_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientMessage.Hello.executable_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_executable_path(), target);
  }

  // string window_title = 3;
  if (this->window_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_window_title().data(), static_cast<int>(this->_internal_window_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientMessage.Hello.window_title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_window_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.Hello)
  return target;
}

size_t ClientMessage_Hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.Hello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string executable_path = 2;
  if (this->executable_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_executable_path());
  }

  // string window_title = 3;
  if (this->window_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_window_title());
  }

  // int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage_Hello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage_Hello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage_Hello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.Hello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.Hello)
    MergeFrom(*source);
  }
}

void ClientMessage_Hello::MergeFrom(const ClientMessage_Hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.executable_path().size() > 0) {

    executable_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executable_path_);
  }
  if (from.window_title().size() > 0) {

    window_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.window_title_);
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void ClientMessage_Hello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Hello::CopyFrom(const ClientMessage_Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Hello::IsInitialized() const {
  return true;
}

void ClientMessage_Hello::InternalSwap(ClientMessage_Hello* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  executable_path_.Swap(&other->executable_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  window_title_.Swap(&other->window_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Hello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage_Frame::InitAsDefaultInstance() {
}
class ClientMessage_Frame::_Internal {
 public:
};

ClientMessage_Frame::ClientMessage_Frame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.Frame)
}
ClientMessage_Frame::ClientMessage_Frame(const ClientMessage_Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buffer().empty()) {
    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientMessage.Frame)
}

void ClientMessage_Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_Frame_client_2eproto.base);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientMessage_Frame::~ClientMessage_Frame() {
  // @@protoc_insertion_point(destructor:ClientMessage.Frame)
  SharedDtor();
}

void ClientMessage_Frame::SharedDtor() {
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientMessage_Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage_Frame& ClientMessage_Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_Frame_client_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ClientMessage_Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage_Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (this->buffer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.Frame)
  return target;
}

size_t ClientMessage_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 1;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage_Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage_Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage_Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.Frame)
    MergeFrom(*source);
  }
}

void ClientMessage_Frame::MergeFrom(const ClientMessage_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
}

void ClientMessage_Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Frame::CopyFrom(const ClientMessage_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Frame::IsInitialized() const {
  return true;
}

void ClientMessage_Frame::InternalSwap(ClientMessage_Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::InitAsDefaultInstance() {
}
class ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_Internal {
 public:
};

ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
}
ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_headshot_, &from.is_headshot_,
    static_cast<size_t>(reinterpret_cast<char*>(&while_blinded_) -
    reinterpret_cast<char*>(&is_headshot_)) + sizeof(while_blinded_));
  // @@protoc_insertion_point(copy_constructor:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::SharedCtor() {
  ::memset(&is_headshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&while_blinded_) -
      reinterpret_cast<char*>(&is_headshot_)) + sizeof(while_blinded_));
}

ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::~ClientMessage_Bookmark_CSGODeepIntegration_KillDetails() {
  // @@protoc_insertion_point(destructor:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  SharedDtor();
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::SharedDtor() {
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_Bookmark_CSGODeepIntegration_KillDetails_client_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_headshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&while_blinded_) -
      reinterpret_cast<char*>(&is_headshot_)) + sizeof(while_blinded_));
  _internal_metadata_.Clear();
}

const char* ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_headshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_headshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_wallbang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_wallbang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_assist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool through_smoke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          through_smoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool while_blinded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          while_blinded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_headshot = 1;
  if (this->is_headshot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_headshot(), target);
  }

  // bool is_wallbang = 2;
  if (this->is_wallbang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_wallbang(), target);
  }

  // bool with_assist = 3;
  if (this->with_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_with_assist(), target);
  }

  // bool through_smoke = 4;
  if (this->through_smoke() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_through_smoke(), target);
  }

  // bool while_blinded = 5;
  if (this->while_blinded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_while_blinded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  return target;
}

size_t ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_headshot = 1;
  if (this->is_headshot() != 0) {
    total_size += 1 + 1;
  }

  // bool is_wallbang = 2;
  if (this->is_wallbang() != 0) {
    total_size += 1 + 1;
  }

  // bool with_assist = 3;
  if (this->with_assist() != 0) {
    total_size += 1 + 1;
  }

  // bool through_smoke = 4;
  if (this->through_smoke() != 0) {
    total_size += 1 + 1;
  }

  // bool while_blinded = 5;
  if (this->while_blinded() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage_Bookmark_CSGODeepIntegration_KillDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
    MergeFrom(*source);
  }
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::MergeFrom(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_headshot() != 0) {
    _internal_set_is_headshot(from._internal_is_headshot());
  }
  if (from.is_wallbang() != 0) {
    _internal_set_is_wallbang(from._internal_is_wallbang());
  }
  if (from.with_assist() != 0) {
    _internal_set_with_assist(from._internal_with_assist());
  }
  if (from.through_smoke() != 0) {
    _internal_set_through_smoke(from._internal_through_smoke());
  }
  if (from.while_blinded() != 0) {
    _internal_set_while_blinded(from._internal_while_blinded());
  }
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::CopyFrom(const ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.Bookmark.CSGODeepIntegration.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::IsInitialized() const {
  return true;
}

void ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::InternalSwap(ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_headshot_, other->is_headshot_);
  swap(is_wallbang_, other->is_wallbang_);
  swap(with_assist_, other->with_assist_);
  swap(through_smoke_, other->through_smoke_);
  swap(while_blinded_, other->while_blinded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage_Bookmark_CSGODeepIntegration::InitAsDefaultInstance() {
  ::_ClientMessage_Bookmark_CSGODeepIntegration_default_instance_._instance.get_mutable()->kill_details_ = const_cast< ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails*>(
      ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::internal_default_instance());
}
class ClientMessage_Bookmark_CSGODeepIntegration::_Internal {
 public:
  static const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails& kill_details(const ClientMessage_Bookmark_CSGODeepIntegration* msg);
};

const ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails&
ClientMessage_Bookmark_CSGODeepIntegration::_Internal::kill_details(const ClientMessage_Bookmark_CSGODeepIntegration* msg) {
  return *msg->kill_details_;
}
ClientMessage_Bookmark_CSGODeepIntegration::ClientMessage_Bookmark_CSGODeepIntegration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.Bookmark.CSGODeepIntegration)
}
ClientMessage_Bookmark_CSGODeepIntegration::ClientMessage_Bookmark_CSGODeepIntegration(const ClientMessage_Bookmark_CSGODeepIntegration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_kill_details()) {
    kill_details_ = new ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails(*from.kill_details_);
  } else {
    kill_details_ = nullptr;
  }
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_competitive_) -
    reinterpret_cast<char*>(&event_)) + sizeof(is_competitive_));
  // @@protoc_insertion_point(copy_constructor:ClientMessage.Bookmark.CSGODeepIntegration)
}

void ClientMessage_Bookmark_CSGODeepIntegration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto.base);
  ::memset(&kill_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_competitive_) -
      reinterpret_cast<char*>(&kill_details_)) + sizeof(is_competitive_));
}

ClientMessage_Bookmark_CSGODeepIntegration::~ClientMessage_Bookmark_CSGODeepIntegration() {
  // @@protoc_insertion_point(destructor:ClientMessage.Bookmark.CSGODeepIntegration)
  SharedDtor();
}

void ClientMessage_Bookmark_CSGODeepIntegration::SharedDtor() {
  if (this != internal_default_instance()) delete kill_details_;
}

void ClientMessage_Bookmark_CSGODeepIntegration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage_Bookmark_CSGODeepIntegration& ClientMessage_Bookmark_CSGODeepIntegration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_Bookmark_CSGODeepIntegration_client_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage_Bookmark_CSGODeepIntegration::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.Bookmark.CSGODeepIntegration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && kill_details_ != nullptr) {
    delete kill_details_;
  }
  kill_details_ = nullptr;
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_competitive_) -
      reinterpret_cast<char*>(&event_)) + sizeof(is_competitive_));
  _internal_metadata_.Clear();
}

const char* ClientMessage_Bookmark_CSGODeepIntegration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientMessage.Bookmark.CSGODeepIntegration.CSGOEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::ClientMessage_Bookmark_CSGODeepIntegration_CSGOEvent>(val));
        } else goto handle_unusual;
        continue;
      // bool is_competitive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_competitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClientMessage.Bookmark.CSGODeepIntegration.KillDetails kill_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kill_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage_Bookmark_CSGODeepIntegration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.Bookmark.CSGODeepIntegration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientMessage.Bookmark.CSGODeepIntegration.CSGOEvent event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // bool is_competitive = 2;
  if (this->is_competitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_competitive(), target);
  }

  // .ClientMessage.Bookmark.CSGODeepIntegration.KillDetails kill_details = 3;
  if (this->has_kill_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kill_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.Bookmark.CSGODeepIntegration)
  return target;
}

size_t ClientMessage_Bookmark_CSGODeepIntegration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.Bookmark.CSGODeepIntegration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientMessage.Bookmark.CSGODeepIntegration.KillDetails kill_details = 3;
  if (this->has_kill_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kill_details_);
  }

  // .ClientMessage.Bookmark.CSGODeepIntegration.CSGOEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  // bool is_competitive = 2;
  if (this->is_competitive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage_Bookmark_CSGODeepIntegration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.Bookmark.CSGODeepIntegration)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage_Bookmark_CSGODeepIntegration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage_Bookmark_CSGODeepIntegration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.Bookmark.CSGODeepIntegration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.Bookmark.CSGODeepIntegration)
    MergeFrom(*source);
  }
}

void ClientMessage_Bookmark_CSGODeepIntegration::MergeFrom(const ClientMessage_Bookmark_CSGODeepIntegration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.Bookmark.CSGODeepIntegration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kill_details()) {
    _internal_mutable_kill_details()->::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails::MergeFrom(from._internal_kill_details());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
  if (from.is_competitive() != 0) {
    _internal_set_is_competitive(from._internal_is_competitive());
  }
}

void ClientMessage_Bookmark_CSGODeepIntegration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.Bookmark.CSGODeepIntegration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Bookmark_CSGODeepIntegration::CopyFrom(const ClientMessage_Bookmark_CSGODeepIntegration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.Bookmark.CSGODeepIntegration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Bookmark_CSGODeepIntegration::IsInitialized() const {
  return true;
}

void ClientMessage_Bookmark_CSGODeepIntegration::InternalSwap(ClientMessage_Bookmark_CSGODeepIntegration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kill_details_, other->kill_details_);
  swap(event_, other->event_);
  swap(is_competitive_, other->is_competitive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Bookmark_CSGODeepIntegration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage_Bookmark::InitAsDefaultInstance() {
  ::_ClientMessage_Bookmark_default_instance_._instance.get_mutable()->csgo_ = const_cast< ::ClientMessage_Bookmark_CSGODeepIntegration*>(
      ::ClientMessage_Bookmark_CSGODeepIntegration::internal_default_instance());
}
class ClientMessage_Bookmark::_Internal {
 public:
  static const ::ClientMessage_Bookmark_CSGODeepIntegration& csgo(const ClientMessage_Bookmark* msg);
};

const ::ClientMessage_Bookmark_CSGODeepIntegration&
ClientMessage_Bookmark::_Internal::csgo(const ClientMessage_Bookmark* msg) {
  return *msg->csgo_;
}
ClientMessage_Bookmark::ClientMessage_Bookmark()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage.Bookmark)
}
ClientMessage_Bookmark::ClientMessage_Bookmark(const ClientMessage_Bookmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_csgo()) {
    csgo_ = new ::ClientMessage_Bookmark_CSGODeepIntegration(*from.csgo_);
  } else {
    csgo_ = nullptr;
  }
  ::memcpy(&is_manual_, &from.is_manual_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&is_manual_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ClientMessage.Bookmark)
}

void ClientMessage_Bookmark::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_Bookmark_client_2eproto.base);
  ::memset(&csgo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&csgo_)) + sizeof(type_));
}

ClientMessage_Bookmark::~ClientMessage_Bookmark() {
  // @@protoc_insertion_point(destructor:ClientMessage.Bookmark)
  SharedDtor();
}

void ClientMessage_Bookmark::SharedDtor() {
  if (this != internal_default_instance()) delete csgo_;
}

void ClientMessage_Bookmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage_Bookmark& ClientMessage_Bookmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_Bookmark_client_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage_Bookmark::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage.Bookmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && csgo_ != nullptr) {
    delete csgo_;
  }
  csgo_ = nullptr;
  ::memset(&is_manual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&is_manual_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* ClientMessage_Bookmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_manual = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_manual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClientMessage.Bookmark.BookmarkType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ClientMessage_Bookmark_BookmarkType>(val));
        } else goto handle_unusual;
        continue;
      // .ClientMessage.Bookmark.CSGODeepIntegration csgo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_csgo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage_Bookmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage.Bookmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_manual = 1;
  if (this->is_manual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_manual(), target);
  }

  // .ClientMessage.Bookmark.BookmarkType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .ClientMessage.Bookmark.CSGODeepIntegration csgo = 3;
  if (this->has_csgo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::csgo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage.Bookmark)
  return target;
}

size_t ClientMessage_Bookmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage.Bookmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientMessage.Bookmark.CSGODeepIntegration csgo = 3;
  if (this->has_csgo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *csgo_);
  }

  // bool is_manual = 1;
  if (this->is_manual() != 0) {
    total_size += 1 + 1;
  }

  // .ClientMessage.Bookmark.BookmarkType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage_Bookmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage.Bookmark)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage_Bookmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage_Bookmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage.Bookmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage.Bookmark)
    MergeFrom(*source);
  }
}

void ClientMessage_Bookmark::MergeFrom(const ClientMessage_Bookmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage.Bookmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_csgo()) {
    _internal_mutable_csgo()->::ClientMessage_Bookmark_CSGODeepIntegration::MergeFrom(from._internal_csgo());
  }
  if (from.is_manual() != 0) {
    _internal_set_is_manual(from._internal_is_manual());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ClientMessage_Bookmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage.Bookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Bookmark::CopyFrom(const ClientMessage_Bookmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage.Bookmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Bookmark::IsInitialized() const {
  return true;
}

void ClientMessage_Bookmark::InternalSwap(ClientMessage_Bookmark* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(csgo_, other->csgo_);
  swap(is_manual_, other->is_manual_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage_Bookmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientMessage::InitAsDefaultInstance() {
  ::_ClientMessage_default_instance_._instance.get_mutable()->hello_ = const_cast< ::ClientMessage_Hello*>(
      ::ClientMessage_Hello::internal_default_instance());
  ::_ClientMessage_default_instance_._instance.get_mutable()->frame_ = const_cast< ::ClientMessage_Frame*>(
      ::ClientMessage_Frame::internal_default_instance());
  ::_ClientMessage_default_instance_._instance.get_mutable()->bookmark_ = const_cast< ::ClientMessage_Bookmark*>(
      ::ClientMessage_Bookmark::internal_default_instance());
}
class ClientMessage::_Internal {
 public:
  static const ::ClientMessage_Hello& hello(const ClientMessage* msg);
  static const ::ClientMessage_Frame& frame(const ClientMessage* msg);
  static const ::ClientMessage_Bookmark& bookmark(const ClientMessage* msg);
};

const ::ClientMessage_Hello&
ClientMessage::_Internal::hello(const ClientMessage* msg) {
  return *msg->hello_;
}
const ::ClientMessage_Frame&
ClientMessage::_Internal::frame(const ClientMessage* msg) {
  return *msg->frame_;
}
const ::ClientMessage_Bookmark&
ClientMessage::_Internal::bookmark(const ClientMessage* msg) {
  return *msg->bookmark_;
}
ClientMessage::ClientMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_hello()) {
    hello_ = new ::ClientMessage_Hello(*from.hello_);
  } else {
    hello_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::ClientMessage_Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_bookmark()) {
    bookmark_ = new ::ClientMessage_Bookmark(*from.bookmark_);
  } else {
    bookmark_ = nullptr;
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:ClientMessage)
}

void ClientMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientMessage_client_2eproto.base);
  ::memset(&hello_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&hello_)) + sizeof(message_type_));
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != internal_default_instance()) delete hello_;
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete bookmark_;
}

void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientMessage& ClientMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientMessage_client_2eproto.base);
  return *internal_default_instance();
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hello_ != nullptr) {
    delete hello_;
  }
  hello_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bookmark_ != nullptr) {
    delete bookmark_;
  }
  bookmark_ = nullptr;
  message_type_ = 0;
  _internal_metadata_.Clear();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ClientMessage.Type message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::ClientMessage_Type>(val));
        } else goto handle_unusual;
        continue;
      // .ClientMessage.Hello hello = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hello(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClientMessage.Frame frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClientMessage.Bookmark bookmark = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookmark(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientMessage.Type message_type = 1;
  if (this->message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // .ClientMessage.Hello hello = 2;
  if (this->has_hello()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hello(this), target, stream);
  }

  // .ClientMessage.Frame frame = 3;
  if (this->has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frame(this), target, stream);
  }

  // .ClientMessage.Bookmark bookmark = 4;
  if (this->has_bookmark()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bookmark(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientMessage.Hello hello = 2;
  if (this->has_hello()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hello_);
  }

  // .ClientMessage.Frame frame = 3;
  if (this->has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  // .ClientMessage.Bookmark bookmark = 4;
  if (this->has_bookmark()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bookmark_);
  }

  // .ClientMessage.Type message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hello()) {
    _internal_mutable_hello()->::ClientMessage_Hello::MergeFrom(from._internal_hello());
  }
  if (from.has_frame()) {
    _internal_mutable_frame()->::ClientMessage_Frame::MergeFrom(from._internal_frame());
  }
  if (from.has_bookmark()) {
    _internal_mutable_bookmark()->::ClientMessage_Bookmark::MergeFrom(from._internal_bookmark());
  }
  if (from.message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
}

void ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hello_, other->hello_);
  swap(frame_, other->frame_);
  swap(bookmark_, other->bookmark_);
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientMessage_Hello* Arena::CreateMaybeMessage< ::ClientMessage_Hello >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage_Hello >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage_Frame* Arena::CreateMaybeMessage< ::ClientMessage_Frame >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage_Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails* Arena::CreateMaybeMessage< ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage_Bookmark_CSGODeepIntegration_KillDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage_Bookmark_CSGODeepIntegration* Arena::CreateMaybeMessage< ::ClientMessage_Bookmark_CSGODeepIntegration >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage_Bookmark_CSGODeepIntegration >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage_Bookmark* Arena::CreateMaybeMessage< ::ClientMessage_Bookmark >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage_Bookmark >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientMessage* Arena::CreateMaybeMessage< ::ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
