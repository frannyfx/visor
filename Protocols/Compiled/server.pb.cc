// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_CaptureConfig_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_OverlayConfig_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_ResourceConfig_server_2eproto;
class Config_ResourceConfig_ResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_ResourceConfig_Resource> _instance;
} _Config_ResourceConfig_Resource_default_instance_;
class Config_ResourceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_ResourceConfig> _instance;
} _Config_ResourceConfig_default_instance_;
class Config_OverlayConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_OverlayConfig> _instance;
} _Config_OverlayConfig_default_instance_;
class Config_CaptureConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_CaptureConfig> _instance;
} _Config_CaptureConfig_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerMessage> _instance;
} _ServerMessage_default_instance_;
static void InitDefaultsscc_info_Config_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_default_instance_;
    new (ptr) ::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Config_server_2eproto}, {
      &scc_info_Config_ResourceConfig_server_2eproto.base,
      &scc_info_Config_OverlayConfig_server_2eproto.base,
      &scc_info_Config_CaptureConfig_server_2eproto.base,}};

static void InitDefaultsscc_info_Config_CaptureConfig_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_CaptureConfig_default_instance_;
    new (ptr) ::Config_CaptureConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Config_CaptureConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_CaptureConfig_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_CaptureConfig_server_2eproto}, {}};

static void InitDefaultsscc_info_Config_OverlayConfig_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_OverlayConfig_default_instance_;
    new (ptr) ::Config_OverlayConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Config_OverlayConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_OverlayConfig_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_OverlayConfig_server_2eproto}, {}};

static void InitDefaultsscc_info_Config_ResourceConfig_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_ResourceConfig_default_instance_;
    new (ptr) ::Config_ResourceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Config_ResourceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_ResourceConfig_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_ResourceConfig_server_2eproto}, {}};

static void InitDefaultsscc_info_Config_ResourceConfig_Resource_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_ResourceConfig_Resource_default_instance_;
    new (ptr) ::Config_ResourceConfig_Resource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Config_ResourceConfig_Resource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_ResourceConfig_Resource_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_ResourceConfig_Resource_server_2eproto}, {}};

static void InitDefaultsscc_info_ServerMessage_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerMessage_default_instance_;
    new (ptr) ::ServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerMessage_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerMessage_server_2eproto}, {
      &scc_info_Config_server_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config_ResourceConfig_Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config_ResourceConfig_Resource, resource_id_),
  PROTOBUF_FIELD_OFFSET(::Config_ResourceConfig_Resource, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config_ResourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config_ResourceConfig, resource_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config_OverlayConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config_OverlayConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::Config_OverlayConfig, show_notifications_),
  PROTOBUF_FIELD_OFFSET(::Config_OverlayConfig, show_capture_indicator_),
  PROTOBUF_FIELD_OFFSET(::Config_OverlayConfig, notifications_position_),
  PROTOBUF_FIELD_OFFSET(::Config_OverlayConfig, capture_indicator_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config_CaptureConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config_CaptureConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::Config_CaptureConfig, capture_mode_),
  PROTOBUF_FIELD_OFFSET(::Config_CaptureConfig, framerate_),
  PROTOBUF_FIELD_OFFSET(::Config_CaptureConfig, instant_replay_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config, resources_),
  PROTOBUF_FIELD_OFFSET(::Config, overlay_),
  PROTOBUF_FIELD_OFFSET(::Config, capture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerMessage, session_id_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Config_ResourceConfig_Resource)},
  { 7, -1, sizeof(::Config_ResourceConfig)},
  { 13, -1, sizeof(::Config_OverlayConfig)},
  { 23, -1, sizeof(::Config_CaptureConfig)},
  { 32, -1, sizeof(::Config)},
  { 40, -1, sizeof(::ServerMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_ResourceConfig_Resource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_ResourceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_OverlayConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_CaptureConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerMessage_default_instance_),
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\"\320\004\n\006Config\022)\n\tresources\030\001"
  " \001(\0132\026.Config.ResourceConfig\022&\n\007overlay\030"
  "\002 \001(\0132\025.Config.OverlayConfig\022&\n\007capture\030"
  "\003 \001(\0132\025.Config.CaptureConfig\032V\n\016Resource"
  "Config\022\025\n\rresource_path\030\001 \001(\t\032-\n\010Resourc"
  "e\022\023\n\013resource_id\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\032\266\001\n"
  "\rOverlayConfig\022\017\n\007enabled\030\001 \001(\010\022\032\n\022show_"
  "notifications\030\002 \001(\010\022\036\n\026show_capture_indi"
  "cator\030\003 \001(\010\022)\n\026notifications_position\030\004 "
  "\001(\0162\t.Position\022-\n\032capture_indicator_posi"
  "tion\030\005 \001(\0162\t.Position\032\271\001\n\rCaptureConfig\022"
  "\017\n\007enabled\030\001 \001(\010\0227\n\014capture_mode\030\002 \001(\0162!"
  ".Config.CaptureConfig.CaptureMode\022\021\n\tfra"
  "merate\030\003 \001(\005\022\037\n\027instant_replay_duration\030"
  "\004 \001(\005\"*\n\013CaptureMode\022\007\n\003DVR\020\000\022\022\n\016INSTANT"
  "_REPLAY\020\001\"\241\001\n\rServerMessage\022\022\n\nsession_i"
  "d\030\001 \001(\t\022)\n\014message_type\030\002 \001(\0162\023.ServerMe"
  "ssage.Type\022\027\n\006config\030\003 \001(\0132\007.Config\"8\n\004T"
  "ype\022\n\n\006CONFIG\020\000\022\021\n\rENCODER_READY\020\001\022\021\n\rEN"
  "CODER_ERROR\020\002*J\n\010Position\022\014\n\010TOP_LEFT\020\000\022"
  "\r\n\tTOP_RIGHT\020\001\022\017\n\013BOTTOM_LEFT\020\002\022\020\n\014BOTTO"
  "M_RIGHT\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_2eproto_sccs[6] = {
  &scc_info_Config_server_2eproto.base,
  &scc_info_Config_CaptureConfig_server_2eproto.base,
  &scc_info_Config_OverlayConfig_server_2eproto.base,
  &scc_info_Config_ResourceConfig_server_2eproto.base,
  &scc_info_Config_ResourceConfig_Resource_server_2eproto.base,
  &scc_info_ServerMessage_server_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2eproto_once;
static bool descriptor_table_server_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto = {
  &descriptor_table_server_2eproto_initialized, descriptor_table_protodef_server_2eproto, "server.proto", 857,
  &descriptor_table_server_2eproto_once, descriptor_table_server_2eproto_sccs, descriptor_table_server_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_server_2eproto::offsets,
  file_level_metadata_server_2eproto, 6, file_level_enum_descriptors_server_2eproto, file_level_service_descriptors_server_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_CaptureConfig_CaptureMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[0];
}
bool Config_CaptureConfig_CaptureMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_CaptureConfig_CaptureMode Config_CaptureConfig::DVR;
constexpr Config_CaptureConfig_CaptureMode Config_CaptureConfig::INSTANT_REPLAY;
constexpr Config_CaptureConfig_CaptureMode Config_CaptureConfig::CaptureMode_MIN;
constexpr Config_CaptureConfig_CaptureMode Config_CaptureConfig::CaptureMode_MAX;
constexpr int Config_CaptureConfig::CaptureMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[1];
}
bool ServerMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerMessage_Type ServerMessage::CONFIG;
constexpr ServerMessage_Type ServerMessage::ENCODER_READY;
constexpr ServerMessage_Type ServerMessage::ENCODER_ERROR;
constexpr ServerMessage_Type ServerMessage::Type_MIN;
constexpr ServerMessage_Type ServerMessage::Type_MAX;
constexpr int ServerMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[2];
}
bool Position_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Config_ResourceConfig_Resource::InitAsDefaultInstance() {
}
class Config_ResourceConfig_Resource::_Internal {
 public:
};

Config_ResourceConfig_Resource::Config_ResourceConfig_Resource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Config.ResourceConfig.Resource)
}
Config_ResourceConfig_Resource::Config_ResourceConfig_Resource(const Config_ResourceConfig_Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  resource_id_ = from.resource_id_;
  // @@protoc_insertion_point(copy_constructor:Config.ResourceConfig.Resource)
}

void Config_ResourceConfig_Resource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_ResourceConfig_Resource_server_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_id_ = 0;
}

Config_ResourceConfig_Resource::~Config_ResourceConfig_Resource() {
  // @@protoc_insertion_point(destructor:Config.ResourceConfig.Resource)
  SharedDtor();
}

void Config_ResourceConfig_Resource::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config_ResourceConfig_Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_ResourceConfig_Resource& Config_ResourceConfig_Resource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_ResourceConfig_Resource_server_2eproto.base);
  return *internal_default_instance();
}


void Config_ResourceConfig_Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.ResourceConfig.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_id_ = 0;
  _internal_metadata_.Clear();
}

const char* Config_ResourceConfig_Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Config.ResourceConfig.Resource.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_ResourceConfig_Resource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.ResourceConfig.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 resource_id = 1;
  if (this->resource_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_resource_id(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Config.ResourceConfig.Resource.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.ResourceConfig.Resource)
  return target;
}

size_t Config_ResourceConfig_Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.ResourceConfig.Resource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 resource_id = 1;
  if (this->resource_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resource_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_ResourceConfig_Resource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.ResourceConfig.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_ResourceConfig_Resource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_ResourceConfig_Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.ResourceConfig.Resource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.ResourceConfig.Resource)
    MergeFrom(*source);
  }
}

void Config_ResourceConfig_Resource::MergeFrom(const Config_ResourceConfig_Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.ResourceConfig.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.resource_id() != 0) {
    _internal_set_resource_id(from._internal_resource_id());
  }
}

void Config_ResourceConfig_Resource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.ResourceConfig.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_ResourceConfig_Resource::CopyFrom(const Config_ResourceConfig_Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.ResourceConfig.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_ResourceConfig_Resource::IsInitialized() const {
  return true;
}

void Config_ResourceConfig_Resource::InternalSwap(Config_ResourceConfig_Resource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resource_id_, other->resource_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_ResourceConfig_Resource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config_ResourceConfig::InitAsDefaultInstance() {
}
class Config_ResourceConfig::_Internal {
 public:
};

Config_ResourceConfig::Config_ResourceConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Config.ResourceConfig)
}
Config_ResourceConfig::Config_ResourceConfig(const Config_ResourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_path().empty()) {
    resource_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_path_);
  }
  // @@protoc_insertion_point(copy_constructor:Config.ResourceConfig)
}

void Config_ResourceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_ResourceConfig_server_2eproto.base);
  resource_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Config_ResourceConfig::~Config_ResourceConfig() {
  // @@protoc_insertion_point(destructor:Config.ResourceConfig)
  SharedDtor();
}

void Config_ResourceConfig::SharedDtor() {
  resource_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config_ResourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_ResourceConfig& Config_ResourceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_ResourceConfig_server_2eproto.base);
  return *internal_default_instance();
}


void Config_ResourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.ResourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Config_ResourceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resource_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resource_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Config.ResourceConfig.resource_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_ResourceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.ResourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_path = 1;
  if (this->resource_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_path().data(), static_cast<int>(this->_internal_resource_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Config.ResourceConfig.resource_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.ResourceConfig)
  return target;
}

size_t Config_ResourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.ResourceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_path = 1;
  if (this->resource_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_ResourceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.ResourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_ResourceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_ResourceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.ResourceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.ResourceConfig)
    MergeFrom(*source);
  }
}

void Config_ResourceConfig::MergeFrom(const Config_ResourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.ResourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource_path().size() > 0) {

    resource_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resource_path_);
  }
}

void Config_ResourceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.ResourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_ResourceConfig::CopyFrom(const Config_ResourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.ResourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_ResourceConfig::IsInitialized() const {
  return true;
}

void Config_ResourceConfig::InternalSwap(Config_ResourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resource_path_.Swap(&other->resource_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_ResourceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config_OverlayConfig::InitAsDefaultInstance() {
}
class Config_OverlayConfig::_Internal {
 public:
};

Config_OverlayConfig::Config_OverlayConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Config.OverlayConfig)
}
Config_OverlayConfig::Config_OverlayConfig(const Config_OverlayConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&capture_indicator_position_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(capture_indicator_position_));
  // @@protoc_insertion_point(copy_constructor:Config.OverlayConfig)
}

void Config_OverlayConfig::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capture_indicator_position_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(capture_indicator_position_));
}

Config_OverlayConfig::~Config_OverlayConfig() {
  // @@protoc_insertion_point(destructor:Config.OverlayConfig)
  SharedDtor();
}

void Config_OverlayConfig::SharedDtor() {
}

void Config_OverlayConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_OverlayConfig& Config_OverlayConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_OverlayConfig_server_2eproto.base);
  return *internal_default_instance();
}


void Config_OverlayConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.OverlayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capture_indicator_position_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(capture_indicator_position_));
  _internal_metadata_.Clear();
}

const char* Config_OverlayConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_notifications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          show_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_capture_indicator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          show_capture_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Position notifications_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_notifications_position(static_cast<::Position>(val));
        } else goto handle_unusual;
        continue;
      // .Position capture_indicator_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_capture_indicator_position(static_cast<::Position>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_OverlayConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.OverlayConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool show_notifications = 2;
  if (this->show_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show_notifications(), target);
  }

  // bool show_capture_indicator = 3;
  if (this->show_capture_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show_capture_indicator(), target);
  }

  // .Position notifications_position = 4;
  if (this->notifications_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notifications_position(), target);
  }

  // .Position capture_indicator_position = 5;
  if (this->capture_indicator_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_capture_indicator_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.OverlayConfig)
  return target;
}

size_t Config_OverlayConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.OverlayConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool show_notifications = 2;
  if (this->show_notifications() != 0) {
    total_size += 1 + 1;
  }

  // bool show_capture_indicator = 3;
  if (this->show_capture_indicator() != 0) {
    total_size += 1 + 1;
  }

  // .Position notifications_position = 4;
  if (this->notifications_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_position());
  }

  // .Position capture_indicator_position = 5;
  if (this->capture_indicator_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_capture_indicator_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_OverlayConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.OverlayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_OverlayConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_OverlayConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.OverlayConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.OverlayConfig)
    MergeFrom(*source);
  }
}

void Config_OverlayConfig::MergeFrom(const Config_OverlayConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.OverlayConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.show_notifications() != 0) {
    _internal_set_show_notifications(from._internal_show_notifications());
  }
  if (from.show_capture_indicator() != 0) {
    _internal_set_show_capture_indicator(from._internal_show_capture_indicator());
  }
  if (from.notifications_position() != 0) {
    _internal_set_notifications_position(from._internal_notifications_position());
  }
  if (from.capture_indicator_position() != 0) {
    _internal_set_capture_indicator_position(from._internal_capture_indicator_position());
  }
}

void Config_OverlayConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.OverlayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_OverlayConfig::CopyFrom(const Config_OverlayConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.OverlayConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_OverlayConfig::IsInitialized() const {
  return true;
}

void Config_OverlayConfig::InternalSwap(Config_OverlayConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(show_notifications_, other->show_notifications_);
  swap(show_capture_indicator_, other->show_capture_indicator_);
  swap(notifications_position_, other->notifications_position_);
  swap(capture_indicator_position_, other->capture_indicator_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_OverlayConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config_CaptureConfig::InitAsDefaultInstance() {
}
class Config_CaptureConfig::_Internal {
 public:
};

Config_CaptureConfig::Config_CaptureConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Config.CaptureConfig)
}
Config_CaptureConfig::Config_CaptureConfig(const Config_CaptureConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&instant_replay_duration_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(instant_replay_duration_));
  // @@protoc_insertion_point(copy_constructor:Config.CaptureConfig)
}

void Config_CaptureConfig::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instant_replay_duration_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(instant_replay_duration_));
}

Config_CaptureConfig::~Config_CaptureConfig() {
  // @@protoc_insertion_point(destructor:Config.CaptureConfig)
  SharedDtor();
}

void Config_CaptureConfig::SharedDtor() {
}

void Config_CaptureConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_CaptureConfig& Config_CaptureConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_CaptureConfig_server_2eproto.base);
  return *internal_default_instance();
}


void Config_CaptureConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.CaptureConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instant_replay_duration_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(instant_replay_duration_));
  _internal_metadata_.Clear();
}

const char* Config_CaptureConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.CaptureConfig.CaptureMode capture_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_capture_mode(static_cast<::Config_CaptureConfig_CaptureMode>(val));
        } else goto handle_unusual;
        continue;
      // int32 framerate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 instant_replay_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          instant_replay_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_CaptureConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.CaptureConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .Config.CaptureConfig.CaptureMode capture_mode = 2;
  if (this->capture_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_capture_mode(), target);
  }

  // int32 framerate = 3;
  if (this->framerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_framerate(), target);
  }

  // int32 instant_replay_duration = 4;
  if (this->instant_replay_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_instant_replay_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.CaptureConfig)
  return target;
}

size_t Config_CaptureConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.CaptureConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // .Config.CaptureConfig.CaptureMode capture_mode = 2;
  if (this->capture_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_capture_mode());
  }

  // int32 framerate = 3;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_framerate());
  }

  // int32 instant_replay_duration = 4;
  if (this->instant_replay_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instant_replay_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_CaptureConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.CaptureConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_CaptureConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_CaptureConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.CaptureConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.CaptureConfig)
    MergeFrom(*source);
  }
}

void Config_CaptureConfig::MergeFrom(const Config_CaptureConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.CaptureConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.capture_mode() != 0) {
    _internal_set_capture_mode(from._internal_capture_mode());
  }
  if (from.framerate() != 0) {
    _internal_set_framerate(from._internal_framerate());
  }
  if (from.instant_replay_duration() != 0) {
    _internal_set_instant_replay_duration(from._internal_instant_replay_duration());
  }
}

void Config_CaptureConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.CaptureConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_CaptureConfig::CopyFrom(const Config_CaptureConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.CaptureConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CaptureConfig::IsInitialized() const {
  return true;
}

void Config_CaptureConfig::InternalSwap(Config_CaptureConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(capture_mode_, other->capture_mode_);
  swap(framerate_, other->framerate_);
  swap(instant_replay_duration_, other->instant_replay_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_CaptureConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::_Config_default_instance_._instance.get_mutable()->resources_ = const_cast< ::Config_ResourceConfig*>(
      ::Config_ResourceConfig::internal_default_instance());
  ::_Config_default_instance_._instance.get_mutable()->overlay_ = const_cast< ::Config_OverlayConfig*>(
      ::Config_OverlayConfig::internal_default_instance());
  ::_Config_default_instance_._instance.get_mutable()->capture_ = const_cast< ::Config_CaptureConfig*>(
      ::Config_CaptureConfig::internal_default_instance());
}
class Config::_Internal {
 public:
  static const ::Config_ResourceConfig& resources(const Config* msg);
  static const ::Config_OverlayConfig& overlay(const Config* msg);
  static const ::Config_CaptureConfig& capture(const Config* msg);
};

const ::Config_ResourceConfig&
Config::_Internal::resources(const Config* msg) {
  return *msg->resources_;
}
const ::Config_OverlayConfig&
Config::_Internal::overlay(const Config* msg) {
  return *msg->overlay_;
}
const ::Config_CaptureConfig&
Config::_Internal::capture(const Config* msg) {
  return *msg->capture_;
}
Config::Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_resources()) {
    resources_ = new ::Config_ResourceConfig(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_overlay()) {
    overlay_ = new ::Config_OverlayConfig(*from.overlay_);
  } else {
    overlay_ = nullptr;
  }
  if (from._internal_has_capture()) {
    capture_ = new ::Config_CaptureConfig(*from.capture_);
  } else {
    capture_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_server_2eproto.base);
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capture_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(capture_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete overlay_;
  if (this != internal_default_instance()) delete capture_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_server_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overlay_ != nullptr) {
    delete overlay_;
  }
  overlay_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && capture_ != nullptr) {
    delete capture_;
  }
  capture_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Config.ResourceConfig resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.OverlayConfig overlay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.CaptureConfig capture = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Config.ResourceConfig resources = 1;
  if (this->has_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resources(this), target, stream);
  }

  // .Config.OverlayConfig overlay = 2;
  if (this->has_overlay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::overlay(this), target, stream);
  }

  // .Config.CaptureConfig capture = 3;
  if (this->has_capture()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capture(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Config.ResourceConfig resources = 1;
  if (this->has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .Config.OverlayConfig overlay = 2;
  if (this->has_overlay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overlay_);
  }

  // .Config.CaptureConfig capture = 3;
  if (this->has_capture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capture_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resources()) {
    _internal_mutable_resources()->::Config_ResourceConfig::MergeFrom(from._internal_resources());
  }
  if (from.has_overlay()) {
    _internal_mutable_overlay()->::Config_OverlayConfig::MergeFrom(from._internal_overlay());
  }
  if (from.has_capture()) {
    _internal_mutable_capture()->::Config_CaptureConfig::MergeFrom(from._internal_capture());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resources_, other->resources_);
  swap(overlay_, other->overlay_);
  swap(capture_, other->capture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
  ::_ServerMessage_default_instance_._instance.get_mutable()->config_ = const_cast< ::Config*>(
      ::Config::internal_default_instance());
}
class ServerMessage::_Internal {
 public:
  static const ::Config& config(const ServerMessage* msg);
};

const ::Config&
ServerMessage::_Internal::config(const ServerMessage* msg) {
  return *msg->config_;
}
ServerMessage::ServerMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from._internal_has_config()) {
    config_ = new ::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:ServerMessage)
}

void ServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerMessage_server_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&config_)) + sizeof(message_type_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerMessage& ServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerMessage_server_2eproto.base);
  return *internal_default_instance();
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  message_type_ = 0;
  _internal_metadata_.Clear();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMessage.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServerMessage.Type message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::ServerMessage_Type>(val));
        } else goto handle_unusual;
        continue;
      // .Config config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerMessage.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // .ServerMessage.Type message_type = 2;
  if (this->message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_message_type(), target);
  }

  // .Config config = 3;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .Config config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .ServerMessage.Type message_type = 2;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.has_config()) {
    _internal_mutable_config()->::Config::MergeFrom(from._internal_config());
  }
  if (from.message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
}

void ServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config_ResourceConfig_Resource* Arena::CreateMaybeMessage< ::Config_ResourceConfig_Resource >(Arena* arena) {
  return Arena::CreateInternal< ::Config_ResourceConfig_Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::Config_ResourceConfig* Arena::CreateMaybeMessage< ::Config_ResourceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Config_ResourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Config_OverlayConfig* Arena::CreateMaybeMessage< ::Config_OverlayConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Config_OverlayConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Config_CaptureConfig* Arena::CreateMaybeMessage< ::Config_CaptureConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Config_CaptureConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Config* Arena::CreateMaybeMessage< ::Config >(Arena* arena) {
  return Arena::CreateInternal< ::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMessage* Arena::CreateMaybeMessage< ::ServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
